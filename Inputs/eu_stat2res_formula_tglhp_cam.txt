#Unit	GSIM residency			Comments
#Instance Counts
	FPS	=        D(knob.CrClock.multiplier)*1000000/CrClocks      # Dummy value as FPS is irrelevant in analytical model 	
	numEUs	=	 D(knob.numEUs) 	#This includes Slices & SubSlices
	numFGs = D(knob.numFGs)				
	CrClocks	=	D(MAX_CYCLES)	
	num_EU_FPU0	=	numEUs	
	num_EU_FPU1	=	numEUs	
	num_EU_EM	=	numEUs	
	num_EU_GA	=	numEUs
	num_EU_TC	=	numFGs	
	num_EU_GRF	=	numEUs	
	num_EU_DFX	=	numEUs	
	num_EU_SMALL	=	numEUs	
	num_EU_CPunit	=	numEUs	
	num_EU_Assign	=	numEUs	
	num_EU_Repeater	=	numEUs	
	num_EU_CLKGLUE	=	numEUs	
	num_EU_NONCLKGLUE	=	numEUs	
	num_EU_DOP	=	numEUs	
	num_EU_TCGA	=	numEUs	
	num_EU_Pipelines	=	numEUs	
	num_EU_Accumulator	=	numEUs			
	num_EU_ExtraPipe = numEUs
        num_EU_INFRA     = numEUs
# Generic definitions
        @FPU@ = FPU
        @ALLINST@ = (mad|mul|mov|mac|sel|add)
        @3Src_INST@ = (mad|mac)
        @2Src_INST@ = (mul|add|sel|mov)
        @ALLDTYPE@ = (16|32|64)
        @TYPE@ = (fp|int)
	FPU_total_count = D(SUM('@FPU@_@ALLINST@_fp@ALLDTYPE@'))
        INT_total_count = D(SUM('@FPU@_@ALLINST@_int@ALLDTYPE@'))		
        FPU3Src_total_count = D(SUM('@FPU@_@3Src_INST@_@TYPE@@ALLDTYPE@'))		
        FPU2Src_total_count = D(SUM('@FPU@_@2Src_INST@_@TYPE@@ALLDTYPE@'))		
#FPU and DPAS opcodes
        FPU0_toggle_rate = 0.3
        FPU1_toggle_rate = 0.3
        GA_toggle_rate = MAX(FPU0_toggle_rate, FPU1_toggle_rate)
        ECC_Flag = D(knob.ECCflag) 
        DPAS_Bypass_percent = 0.75 
        FPU0_mad_fp32 = (FPU_total_count > 0) ? (D(SUM('@FPU@_mad_fp32')) / (FPU_total_count)) : 0
        FPU0_mul_fp32 = (FPU_total_count > 0) ? (D(SUM('@FPU@_mul_fp32')) / (FPU_total_count)) : 0
        FPU0_add_fp32 = (FPU_total_count > 0) ? (D(SUM('@FPU@_add_fp32')) / (FPU_total_count)) : 0 
        FPU0_sel_fp32 = (FPU_total_count > 0) ? (D(SUM('@FPU@_sel_fp32')) / (FPU_total_count)) : 0 
        FPU0_mac_fp32 = (FPU_total_count > 0) ? (D(SUM('@FPU@_mac_fp32')) / (FPU_total_count)) : 0 
        FPU0_mad_fp16 = (FPU_total_count > 0) ? (D(SUM('@FPU@_mad_fp16')) / (FPU_total_count)) : 0 
        FPU0_mul_fp16 = (FPU_total_count > 0) ? (D(SUM('@FPU@_mul_fp16')) / (FPU_total_count)) : 0 
        FPU0_add_fp16 = (FPU_total_count > 0) ? (D(SUM('@FPU@_add_fp16')) / (FPU_total_count)) : 0 
        FPU0_sel_fp16 = (FPU_total_count > 0) ? (D(SUM('@FPU@_sel_fp16')) / (FPU_total_count)) : 0 
        FPU0_mac_fp16 = (FPU_total_count > 0) ? (D(SUM('@FPU@_mac_fp16')) / (FPU_total_count)) : 0 
        FPU1_mad_int32 = (INT_total_count > 0) ? (D(SUM('@FPU@_mad_int32')) / (INT_total_count)) : 0 
        FPU1_mac_int32 = (INT_total_count > 0) ? (D(SUM('@FPU@_mac_int32')) / (INT_total_count)) : 0 
        FPU1_mul_int32 = (INT_total_count > 0) ? (D(SUM('@FPU@_mul_int32')) / (INT_total_count)) : 0 
        FPU1_add_int32 = (INT_total_count > 0) ? (D(SUM('@FPU@_add_int32')) / (INT_total_count)) : 0 
        FPU1_sel_int32 = (INT_total_count > 0) ? (D(SUM('@FPU@_sel_int32))) / (INT_total_count)) : 0 
        FPU1_mad_int16 = (INT_total_count > 0) ? (D(SUM('@FPU@_mad_int16')) / (INT_total_count)) : 0 
        FPU1_mul_int16 = (INT_total_count > 0) ? (D(SUM('@FPU@_mul_int16')) / (INT_total_count)) : 0 
        FPU1_add_int16 = (INT_total_count > 0) ? (D(SUM('@FPU@_add_int16')) / (INT_total_count)) : 0 
        FPU1_sel_int16 = (INT_total_count > 0) ? (D(SUM('@FPU@_sel_int16')) / (INT_total_count)) : 0 
        FPU1_mac_int16 = (INT_total_count > 0) ? (D(SUM('@FPU@_mac_int16')) / (INT_total_count)) : 0 
        PS2_GRF_SEND_PATH = D(send)/CrClocks
        PS2_EU_FPU0   = D(FPU_UTILIZATION)
        PS2_EU_FPU1   = INT_total_count/CrClocks
        EM_transc_fp32 = D(EM_math)/CrClocks
        ExtraPipe_DPAS_Float = D(SYS_FLOAT)/CrClocks
        ExtraPipe_DPAS_Int = D(SYS_INT)/CrClocks
#GRF and GA related
        PS2_GA_FPU3Src_SinglePipe = (FPU3Src_total_count / FPU_total_count) * D(GA_FPU) 
        PS2_GA_FPU2Src_SinglePipe = (FPU2Src_total_count / FPU_total_count) * D(GA_FPU) 
        PS2_GA_ExtraPipe = D(GA_ExtraPipe)
        PS2_GRF_READ = (ECC_Flag == 0) ? (D(GRF_READ)/CrClocks) : 0
        PS2_GRF_WRITE = (ECC_Flag == 0) ? (D(GRF_WRITE)/CrClocks) : 0
        PS2_GRF_READ_ECC = (ECC_Flag > 0) ? (D(GRF_READ)/CrClocks) : 0
        PS2_GRF_WRITE_ECC = (ECC_Flag > 0) ? (D(GRF_WRITE)/CrClocks) : 0
        PS2_TC_1Dispatch = D(TC)
#INFRA power
        PS2_EU_INFRA = 1
        
        
