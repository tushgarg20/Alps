#Unit	GSIM residency			Comments
#Instance Counts				
	numL3Banks								=	knob.global.NumL3Banks	
	num_L3_Slices							=	knob.global.NumSlices + SUM('knob\.STK\d+\.NumSlices')	
	num_L3_SubSlices						=	knob.S0.NumSubSlices + knob.STK0.S0.NumSubSlices	
	num_L3_Bank_LTCD_EBB					=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LTCD_Data					=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LTCD_Tag					=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LSQD						=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LSQC						=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LTCC						=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LSLM						=	num_L3_Slices * numL3Banks	
	num_L3_Bank_L3BankOther					=	num_L3_Slices * numL3Banks	#GLUE/Small
	num_L3_Bank_DOP							=	num_L3_Slices * numL3Banks	
	num_L3_Bank_DFX							=	num_L3_Slices * numL3Banks	
	num_L3_Bank_SMALL						=	num_L3_Slices * numL3Banks	
	num_L3_Bank_CPunit						=	num_L3_Slices * numL3Banks	
	num_L3_Bank_Assign						=	num_L3_Slices * numL3Banks	
	num_L3_Bank_Repeater					=	num_L3_Slices * numL3Banks	
	num_L3_Bank_CLKGLUE						=	num_L3_Slices * numL3Banks	
	num_L3_Bank_NONCLKGLUE					=	num_L3_Slices * numL3Banks
	num_L3_Bank_LBI							=	num_L3_Slices * numL3Banks
	
#Generic				
	@ANY_L3BANK@							=	(STK\d+\.S\d+\.uL3\.Bank_\d+\.|S\d+\.uL3\.Bank_\d+\.)
	@ANY_L3@								=	(STK\d+\.S\d+\.uL3\.|S\d+\.uL3\.)
	.CrClk									=	D(CrClock.Clocks)	
	.CrClk2x								=	D(SUM('2xCrClock\.Clocks'))	
	LNI_max_ports							=	numL3Banks * 2	#Max ports availabe for LNI
	.temp_LNE_max1							=	D(MIN(6, (num_L3_SubSlices + 3)))	
	.temp_LNE_max2							=	D(MIN(4, (num_L3_SubSlices + 3)))	
	LNE_max_ports							=	(num_L3_Slices > 1) ? .temp_LNE_max1 : .temp_LNE_max2	#Max ports available for LNE
	L3SuperQSize							=	knob.S0.uL3.SuperQSize + knob.STK0.S0.uL3.SuperQSize	
	@ANY_LNI@								=	(STK\d+\.S\d+\.uL3\.LNI_\d+\.Bank_\d+_|S\d+\.uL3\.LNI_\d+\.bank_\d+\_)
	num_L3Node_LNI			=	COUNT('knob\.S\d\.uL3\.LNI_\d\.MemFillBuf\.PopEvent')					
#LTCD_EBB				
	PS0_LTCD_EBB							=	1 - (PS2_LTCD_EBB_Read + PS2_LTCD_EBB_Write + PS2_LTCD_EBB_HB_Read + PS2_LTCD_EBB_HB_Write)	#Changed to use residual residency
	PS1_LTCD_EBB							=	0	#No stall by design
	PS2_LTCD_EBB_Read						=	(D(SUM('@ANY_L3BANK@DataRamRd')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	PS2_LTCD_EBB_Write						=	(D(SUM('@ANY_L3BANK@DataRamWr')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	#PS2_LTCD_EBB_HB_Read					=	(D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmAtomicDW'))) / (16 * (.CrClk * num_L3_Slices * numL3Banks))	
	#PS2_LTCD_EBB_HB_Write					=	(D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmAtomicDW'))) / (16 * (.CrClk * num_L3_Slices * numL3Banks))	
	PS2_LTCD_EBB_HB_Read					=   ((D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW')))/(16 * (.CrClk2x * num_L3_Slices * numL3Banks))) + ((D(SUM('@ANY_L3BANK@HBDataRamSlmRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmAtomicDW'))) / (64 * (.CrClk2x * num_L3_Slices * numL3Banks)))               
	PS2_LTCD_EBB_HB_Write					=   ((D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW')))/(16 * (.CrClk2x * num_L3_Slices * numL3Banks))) + ((D(SUM('@ANY_L3BANK@HBDataRamSlmWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmAtomicDW'))) / (64 * (.CrClk2x * num_L3_Slices * numL3Banks)))   

#LTCD_Data_Syn				
	PS0_LTCD_DATA							=	D(SUM('@ANY_L3BANK@DataIdleCount\.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	PS1_LTCD_DATA							=	(D(SUM('@ANY_L3BANK@DataIdleOrStallCount\.2xCrClock')) - D(SUM('@ANY_L3BANK@DataIdleCount\.2xCrClock'))) / (.CrClk2x * num_L3_Slices * numL3Banks)
	PS2_LTCD_DATA_READ						=	(D(SUM('@ANY_L3BANK@DataRamRd'))) / (.CrClk2x * num_L3_Slices * numL3Banks)
	PS2_LTCD_DATA_WRITE						=	D(SUM('@ANY_L3BANK@DataRamWr')) / (.CrClk2x * num_L3_Slices * numL3Banks)
	PS2_LTCD_DATA_EVICT						=   D(SUM('@ANY_L3BANK@Evict')) / (.CrClk2x * num_L3_Slices * numL3Banks)
	.residualltcddata						=	1- (PS0_LTCD_DATA+PS1_LTCD_DATA+PS2_LTCD_DATA_READ+PS2_LTCD_DATA_WRITE+PS2_LTCD_DATA_EVICT)
	PS2_LTCD_DATA_Else						=	(.residualltcddata<0)?0:.residualltcddata
	
#LTCD_Tag_Syn			
	.PS2_LTCD_Data_NonSLM_ECC_NoTagRead		=	(D(SUM('@ANY_L3BANK@UrbRd')) + D(SUM('@ANY_L3BANK@UrbAtomic'))) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	.PS2_LTCD_Data_NonSLM_ECC_NoTagWrite	=	(D(SUM('@ANY_L3BANK@UrbWr')) + D(SUM('@ANY_L3BANK@UrbAtomic'))) / (.CrClk2x * num_L3_Slices * numL3Banks)	# Total URB (Non SLM - No Tag) Reads
	PS0_LTCD_TAG							=	D(SUM('@ANY_L3BANK@TagIdleCount\.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)
	#non stallable PS1_LTCD_TAG							=	(D(SUM('@ANY_L3BANK@TagIdleOrStallCount\.2xCrClock')) - D(SUM('@ANY_L3BANK@TagIdleCount\.2xCrClock'))) / (.CrClk2x * num_L3_Slices * numL3Banks)
	#original equation (erroneous) PS2_LTCD_TAG_READ	=	D(SUM('@ANY_L3BANK@TagInputRd\d\.pushed')) / (.CrClk2x * num_L3_Slices * numL3Banks)		
	#original equation (erroneous) PS2_LTCD_TAG_WRITE	=	D(SUM('@ANY_L3BANK@TagInputWr\d\.pushed')) / (.CrClk2x * num_L3_Slices * numL3Banks)
	#less accurate PS2_LTCD_TAG_READ						=	(D(SUM('@ANY_L3BANK@TagInputRd\d\.pushed')) / (.CrClk2x * num_L3_Slices * numL3Banks))	- .PS2_LTCD_Data_NonSLM_ECC_NoTagRead	
	#less accurate PS2_LTCD_TAG_WRITE						=	(D(SUM('@ANY_L3BANK@TagInputWr\d\.pushed')) / (.CrClk2x * num_L3_Slices * numL3Banks)) - .PS2_LTCD_Data_NonSLM_ECC_NoTagWrite
	PS2_LTCD_TAG_READ						=	(D(SUM('@ANY_L3BANK@TagRamRd'))) / (.CrClk2x * num_L3_Slices * numL3Banks)
	PS2_LTCD_TAG_WRITE						=	(D(SUM('@ANY_L3BANK@TagRamWr'))) / (.CrClk2x * num_L3_Slices * numL3Banks) 
	PS2_LTCD_TAG_EVICT						=	(D(SUM('@ANY_L3BANK@Evict'))) / (.CrClk2x * num_L3_Slices * numL3Banks)
	.residualltcdtag						=	1- (PS0_LTCD_TAG+PS2_LTCD_TAG_READ+PS2_LTCD_TAG_WRITE+PS2_LTCD_TAG_EVICT)
	PS2_LTCD_TAG_Else						=	(.residualltcdtag<0)?0:.residualltcdtag



	#LSQD			#new stats are not available	
	PS0_LSQD								=	D(SUM('S\d+\.uL3.Bank_\d+\.LsqdIdle'))/(.CrClk2x * num_L3_Slices * numL3Banks)
	PS1_LSQD								=	D(SUM('S\d+\.uL3.Bank_\d+\.LsqdStalled'))/(.CrClk2x * num_L3_Slices * numL3Banks)
	PS2_LSQD_WRITE							=	D(SUM('S\d+\.uL3.Bank_\d+\.LsqdWrite'))/(.CrClk2x * num_L3_Slices * numL3Banks)
	PS2_LSQD_LNE_READ_RETURN				=	D(SUM('S\d+\.uL3.Bank_\d+\.LsqdReadRet'))/(.CrClk2x * num_L3_Slices * numL3Banks)
	PS2_LSQD_HIT_WRITE						=  (D(SUM('@ANY_L3BANK@DataRamRd'))+  D(SUM('@ANY_L3BANK@Evict'))) / (.CrClk2x * num_L3_Slices * numL3Banks)
	PS2_LSQD_ATOMIC_WRITE					=	D(SUM('S\d+\.uL3.Bank_\d+\.LsqdAtomic'))/(.CrClk2x * num_L3_Slices * numL3Banks)
	.residuallsqd							=	1- (PS0_LSQD + PS1_LSQD + PS2_LSQD_WRITE + PS2_LSQD_LNE_READ_RETURN + PS2_LSQD_HIT_WRITE + PS2_LSQD_ATOMIC_WRITE)
	PS2_LSQD_Else							=	(.residuallsqd<0)?0:.residuallsqd
	
#LSQC		#new PS1 stats are not available		
	PS0_LSQC								=	D(SUM('@ANY_L3BANK@SQEmptyCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	#PS1_LSQC								=	D(SUM('@ANY_L3BANK@SQFullCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	idle_count_per_bank						=	D(SUM('@ANY_L3BANK@SuperQEntries_Empty')) / (num_L3_Slices * numL3Banks)
	stalled_count_per_bank					=	(D(SUM('@ANY_L3BANK@SuperQEntries_ReadyButNoSlotToMem'))+D(SUM('@ANY_L3BANK@SuperQEntries_InFlightToMem'))+D(SUM('@ANY_L3BANK@SuperQEntries_NotReadyDependent'))+D(SUM('@ANY_L3BANK@SuperQEntries_WaitingOnEviction'))+D(SUM('@ANY_L3BANK@SuperQEntries_ReadyButNoSlotToUrb'))+D(SUM('@ANY_L3BANK@SuperQEntries_ReadyButNoSlotToArray'))) / (num_L3_Slices * numL3Banks)
	.temp_ps1_lsqc							=	stalled_count_per_bank / L3SuperQSize
	PS1_LSQC								=D(SUM('@ANY_L3BANK@Stalled'))/(((.CrClk2x)/2) * num_L3_Slices * numL3Banks)
	#PS2_LSQC_temp							=	1 - PS0_LSQC - PS1_LSQC
		active_count_per_bank					=	((L3SuperQSize*(.CrClk2x)/2) -idle_count_per_bank -stalled_count_per_bank) #ProcessSuperQ done at 1x clock#Confirm
	LSQC_activeslots_per_clock			=	active_count_per_bank/(((.CrClk2x)/2)*(PS2_LSQC)*L3SuperQSize)
	PS2_LSQC							=	1 - PS0_LSQC - PS1_LSQC

	#Cdyn									=	(1.26974*LSQC_activeslots_per_clock)+ 7.45155
	#PS2_LSQC								=	(Cdyn * PS2_LSQC_temp)/88.715
        	        			
#LTCC	#new stats are not available			
	PS0_LTCC								=	D(SUM('@ANY_L3BANK@SQEmptyCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	PS1_LTCC								=	D(SUM('@ANY_L3BANK@SQFullCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	PS2_LTCC								=	1 - PS0_LTCC - PS1_LTCC	
											
#LBI
	
	PS0_LBI=D(SUM('@ANY_L3@LNI_\d\.Idle'))/ (.CrClk * num_L3_Slices * num_L3Node_LNI)
	PS1_LBI=D(SUM('@ANY_L3BANK@SQFullCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)#LBI ingress fifo not empty and no LSQC slot credit
	PS2_LBI_BANK_READ = (D(SUM('@ANY_LNI@LocalSliceRead')) + D(SUM('@ANY_LNI@XSliceSliceRead')))/ ((.CrClk2x * num_L3_Slices * numL3Banks))  #bank read on port0 #divide by 2 to make it per port
	PS2_LBI_BANK_WRITE = (D(SUM('@ANY_LNI@LocalSliceWrite')) + D(SUM('@ANY_LNI@XSliceSliceWrite')))/ ((.CrClk2x * num_L3_Slices * numL3Banks)) #bank write on port0
	PS2_LBI_MEFFILL=D(SUM('@ANY_LNI@MemReturn'))/ ((.CrClk2x * num_L3_Slices * numL3Banks))#Mem fill to LSQD
	.residuallbi							=	1- (PS0_LBI + PS1_LBI + PS2_LBI_BANK_WRITE + PS2_LBI_BANK_READ + PS2_LBI_MEFFILL)
	PS2_LBI_Else							=	(.residuallbi<0)?0:.residuallbi

#Other stats	
	BankURBRd								=	D(SUM('S\d+\.uL3.Bank_\d+\.UrbRd'))/(.CrClk2x * num_L3_Slices * numL3Banks)
	BankURBWr								=	D(SUM('S\d+\.uL3.Bank_\d+\.UrbWr'))/(.CrClk2x * num_L3_Slices * numL3Banks)

#LSLM				
#	PS0_LSLM	=	D(SUM('@ANY_L3BANK@SLMIdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	#Place holder#
#	PS1_LSLM	=	1 - PS0_LSLM - PS2_LSLM_Atomics - PS2_LSLM_NonAtomics	
#	PS2_LSLM_Atomics	=	(D(SUM('@ANY_L3BANK@HBDataRamSlmAtomic'))) / (.CrClk2x * num_L3_Slices * numL3Banks)
#	PS2_LSLM_NonAtomics	=	(D(SUM('@ANY_L3BANK@HBDataRamSlmWr')) + D(SUM('@ANY_L3BANK@HBDataRamSlmRd'))) / (.CrClk2x * num_L3_Slices * numL3Banks)

#L3Other				
	PS0_L3BankOther	=	D(SUM('@ANY_L3@IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS1_L3BankOther	=	1 - PS0_L3BankOther - PS2_L3BankOther	
	PS2_L3BankOther	=	((D(SUM('@ANY_L3BANK@DataRamRd')) + D(SUM('@ANY_L3BANK@DataRamWr')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk2x * num_L3_Slices * numL3Banks)) + ((D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW'))) / (16 * .CrClk2x * num_L3_Slices * numL3Banks))	
				
#L3DOP				
	PS0_L3_Bank_DOP	=	0	
	PS2_L3_Bank_DOP	=	1	#No DOP gating in L3
				
#L3DFX				
	PS0_L3_Bank_DFX	=	D(SUM('@ANY_L3@IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS2_L3_Bank_DFX	=	1-PS0_L3_Bank_DFX	
				
#L3SMALL				
	PS0_L3_Bank_SMALL	=	D(SUM('@ANY_L3@IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS1_L3_Bank_SMALL	=	1 - PS0_L3_Bank_SMALL - PS2_L3_Bank_SMALL	
	PS2_L3_Bank_SMALL	=	((D(SUM('@ANY_L3BANK@DataRamRd')) + D(SUM('@ANY_L3BANK@DataRamWr')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk2x * num_L3_Slices * numL3Banks)) + ((D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW'))) / (16 * .CrClk2x * num_L3_Slices * numL3Banks))	
				
			
#L3CPunit				
	PS0_L3_Bank_CPunit	=	D(SUM('@ANY_L3@IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS2_L3_Bank_CPunit	=	1-PS0_L3_Bank_SMALL	
				
#L3Assign				
	PS0_L3_Bank_Assign	=	D(SUM('@ANY_L3@IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS2_L3_Bank_Assign	=	1-PS0_L3_Bank_SMALL	
				
#L3Repeater				
	PS0_L3_Bank_Repeater	=	D(SUM('@ANY_L3@IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS1_L3_Bank_Repeater	=	1 - PS0_L3_Bank_Repeater - PS2_L3_Bank_Repeater	
	PS2_L3_Bank_Repeater	=	((D(SUM('@ANY_L3BANK@DataRamRd')) + D(SUM('@ANY_L3BANK@DataRamWr')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk2x * num_L3_Slices * numL3Banks)) + ((D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW'))) / (16 * .CrClk2x * num_L3_Slices * numL3Banks))	
				
		
#L3CLKGLUE				
	PS0_L3_Bank_CLKGLUE	=	D(SUM('@ANY_L3@IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS2_L3_Bank_CLKGLUE	=	1-PS0_L3_Bank_CLKGLUE	
				
#L3NONCLKGLUE				

	PS0_L3_Bank_NONCLKGLUE	=	D(SUM('@ANY_L3@IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS1_L3_Bank_NONCLKGLUE	=	1 - PS0_L3_Bank_NONCLKGLUE - PS2_L3_Bank_NONCLKGLUE	
	PS2_L3_Bank_NONCLKGLUE	=	((D(SUM('@ANY_L3BANK@DataRamRd')) + D(SUM('@ANY_L3BANK@DataRamWr')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk2x * num_L3_Slices * numL3Banks)) + ((D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW'))) / (16 * .CrClk2x * num_L3_Slices * numL3Banks))	
				

