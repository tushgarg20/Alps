#Unit	GSIM residency			Comments
#Instance Counts				
	numL3Banks	=	knob.global.NumL3Banks	
	num_L3_Slices	=	knob.global.NumSlices	
	num_L3_SubSlices	=	knob.S0.NumSubSlices	
	num_L3_Bank_LTCD_EBB	=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LTCD_Data	=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LTCD_Tag	=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LSQD	=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LSQC	=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LTCC	=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LSLM	=	num_L3_Slices * numL3Banks	
	num_L3_Bank_LNI	=	num_L3_Slices	
	num_L3_Bank_LNE	=	num_L3_Slices	
	num_L3_Bank_LNICS	=	num_L3_Slices	
	num_L3_Bank_LNECS	=	num_L3_Slices	
	num_L3_Bank_L3BankOther	=	num_L3_Slices * numL3Banks	#GLUE/Small
	num_L3_Bank_DOP	=	num_L3_Slices	
	num_L3_Bank_DFX	=	num_L3_Slices	
	num_L3_Bank_SMALL	=	num_L3_Slices	
	num_L3_Bank_GLUE	=	num_L3_Slices	
#Generic				
	 @ANY_L3BANK@	=	S\d+\.uL3\.Bank_\d+\.	
	 .CrClk	=	D(CrClock.Clocks)	
	 .CrClk2x	=	D(SUM('2xCrClock\.Clocks'))	
	LNI_max_ports	=	numL3Banks * 2	#Max ports availabe for LNI
	.temp_LNE_max1	=	D(MIN(6, (num_L3_SubSlices + 3)))	
	.temp_LNE_max2	=	D(MIN(4, (num_L3_SubSlices + 3)))	
	LNE_max_ports	=	(num_L3_Slices > 1) ? .temp_LNE_max1 : .temp_LNE_max2	#Max ports available for LNE
#LTCD_EBB				
	PS0_LTCD_EBB	=	D(SUM('@ANY_L3BANK@DataIdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	PS1_LTCD_EBB	=	1-(PS0_LTCD_EBB + PS2_LTCD_EBB_Read + PS2_LTCD_EBB_Write + PS2_LTCD_EBB_HB_Read + PS2_LTCD_EBB_HB_Write)	
	PS2_LTCD_EBB_Read	=	(D(SUM('@ANY_L3BANK@DataRamRd')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk * num_L3_Slices * numL3Banks)	
	PS2_LTCD_EBB_Write	=	(D(SUM('@ANY_L3BANK@DataRamWr')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk * num_L3_Slices * numL3Banks)	
	PS2_LTCD_EBB_HB_Read	=	(D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmAtomicDW'))) / (16 * (.CrClk * num_L3_Slices * numL3Banks))	
	PS2_LTCD_EBB_HB_Write	=	(D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmAtomicDW'))) / (16 * (.CrClk * num_L3_Slices * numL3Banks))	
#LTCD_Data_Syn				
	PS0_LTCD_Data	=	D(SUM('@ANY_L3BANK@DataIdleCount\.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	.URB_HB_bank_reads	=	(D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW'))) / (16 * (.CrClk * num_L3_Slices * numL3Banks))	#Using HB data read/write stats to be consistent
	.URB_HB_bank_writes	=	(D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW'))) / (16 * (.CrClk * num_L3_Slices * numL3Banks))	#Using HB data read/write stats to be consistent
	.URB_bank_reads	=	((D(SUM('@ANY_L3BANK@UrbRd')) + D(SUM('@ANY_L3BANK@UrbAtomic'))) / (.CrClk * num_L3_Slices * numL3Banks)) - .URB_HB_bank_reads	#Normal Bank reads = Total URB reads - HB reads
	.URB_bank_writes	=	((D(SUM('@ANY_L3BANK@UrbWr')) + D(SUM('@ANY_L3BANK@UrbAtomic'))) / (.CrClk * num_L3_Slices * numL3Banks)) - .URB_HB_bank_writes	#Normal Bank writes = Total URB writes - HB writes
	PS1_LTCD_Data	=	1 - (PS0_LTCD_Data + PS2_LTCD_Data_NonSLM_ECC_TagRead + PS2_LTCD_Data_NonSLM_ECC_TagWrite + PS2_LTCD_Data_NonSLM_ECC_NoTagRead + PS2_LTCD_Data_NonSLM_ECC_NoTagWrite + PS2_LTCD_Data_SLM_ECC_NoTagRead + PS2_LTCD_Data_SLM_ECC_NoTagWrite)	
	PS2_LTCD_Data_NonSLM_ECC_TagRead	=	PS2_LTCD_EBB_Read - .URB_bank_reads	
	PS2_LTCD_Data_NonSLM_ECC_TagWrite	=	PS2_LTCD_EBB_Write - .URB_bank_writes	
	PS2_LTCD_Data_NonSLM_ECC_NoTagRead	=	(D(SUM('@ANY_L3BANK@UrbRd')) + D(SUM('@ANY_L3BANK@UrbAtomic'))) / (.CrClk * num_L3_Slices * numL3Banks)	
	PS2_LTCD_Data_NonSLM_ECC_NoTagWrite	=	(D(SUM('@ANY_L3BANK@UrbWr')) + D(SUM('@ANY_L3BANK@UrbAtomic'))) / (.CrClk * num_L3_Slices * numL3Banks)	# Total URB (Non SLM - No Tag) Reads
	PS2_LTCD_Data_SLM_ECC_NoTagRead	=	(D(SUM('@ANY_L3BANK@HBDataRamSlmRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmAtomicDW'))) / (16 * (.CrClk * num_L3_Slices * numL3Banks))	# Total URB (Non SLM - No Tag) Writes
	PS2_LTCD_Data_SLM_ECC_NoTagWrite	=	(D(SUM('@ANY_L3BANK@HBDataRamSlmWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmAtomicDW'))) / (16 * (.CrClk * num_L3_Slices * numL3Banks))	# Total SLM Reads
#LTCD_Tag_Syn				# Total SLM Writes
	PS0_LTCD_Tag	=	D(SUM('@ANY_L3BANK@TagIdleCount\.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	PS1_LTCD_Tag	=	1 - (PS0_LTCD_Tag + PS2_LTCD_Tag_NonSLM_ECC_TagRead + PS2_LTCD_Tag_NonSLM_ECC_TagWrite)	
	PS2_LTCD_Tag_NonSLM_ECC_TagRead	=	PS2_LTCD_EBB_Read - .URB_bank_reads	#Tag Reads = Total Normal Bank reads - URB Normal bank reads
	PS2_LTCD_Tag_NonSLM_ECC_TagWrite	=	PS2_LTCD_EBB_Write - .URB_bank_writes	#Tag Writes = Total Normal Bank writes - URB Normal bank writes
#LSQD				
	PS0_LSQD	=	D(SUM('@ANY_L3BANK@DataIdleCount\.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	PS1_LSQD	=	1 - (PS0_LSQD + PS2_LSQD_nonatomics + PS2_LSQD_atomics)	
	PS2_LSQD_nonatomics	=	(D(SUM('@ANY_L3BANK@DataRamRd')) + D(SUM('@ANY_L3BANK@DataRamWr')) + (D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW'))/16) + (D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW'))/16) + (D(SUM('@ANY_L3BANK@HBDataRamSlmRdDW'))/16) + (D(SUM('@ANY_L3BANK@HBDataRamSlmWrDW'))/16)) / (.CrClk * num_L3_Slices * numL3Banks)	#Data RAM reads + writes
	PS2_LSQD_atomics	=	(D(SUM('@ANY_L3BANK@DataRamAtomic')) + (D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW')))/16) / (.CrClk * num_L3_Slices * numL3Banks)	#URB atomics  + Data RAM atomics
#LSQC				
	PS0_LSQC	=	D(SUM('@ANY_L3BANK@SQEmptyCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	PS1_LSQC	=	D(SUM('@ANY_L3BANK@SQFullCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	PS2_LSQC	=	1 - PS0_LSQC - PS1_LSQC	
#LTCC				
	PS0_LTCC	=	D(SUM('@ANY_L3BANK@SQEmptyCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	PS1_LTCC	=	D(SUM('@ANY_L3BANK@SQFullCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	
	PS2_LTCC	=	1 - PS0_LTCC - PS1_LTCC	
#LSLM				
	PS0_LSLM	=	D(SUM('@ANY_L3BANK@SLMIdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices * numL3Banks)	#Place holder
	PS1_LSLM	=	1 - PS0_LSLM - PS2_LSLM_Atomics - PS2_LSLM_NonAtomics	
	PS2_LSLM_Atomics	=	(D(SUM('@ANY_L3BANK@HBDataRamSlmAtomicDW'))) / (16 * .CrClk)	
	PS2_LSLM_NonAtomics	=	(D(SUM('@ANY_L3BANK@HBDataRamSlmWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamSlmRdDW'))) / (16 * .CrClk)	
#LNI				
	PS0_LNI	=	D(SUM('S\d+.uL3\.IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	.temp_LNI_weighted_sum	=	(D(SUM('S\d+.uL3\.LNI\.Winners.1')) * 1) + (D(SUM('S\d+.uL3\.LNI\.Winners.2')) * 2) + (D(SUM('S\d+.uL3\.LNI\.Winners.3')) * 3) + (D(SUM('S\d+.uL3\.LNI\.Winners.4')) * 4) + (D(SUM('S\d+.uL3\.LNI\.Winners.5')) * 5) + (D(SUM('S\d+.uL3\.LNI\.Winners.6')) * 6) + (D(SUM('S\d+.uL3\.LNI\.Winners.7')) * 7) + (D(SUM('S\d+.uL3\.LNI\.Winners.8')) * 8)	#assuming the max ports for any config cannot exceed 8. need to change this to be more elegant
	.temp_LNI_sum	=	(D(SUM('S\d+.uL3\.LNI\.Winners.1'))) + (D(SUM('S\d+.uL3\.LNI\.Winners.2'))) + (D(SUM('S\d+.uL3\.LNI\.Winners.3'))) + (D(SUM('S\d+.uL3\.LNI\.Winners.4'))) + (D(SUM('S\d+.uL3\.LNI\.Winners.5'))) + (D(SUM('S\d+.uL3\.LNI\.Winners.6'))) + (D(SUM('S\d+.uL3\.LNI\.Winners.7'))) + (D(SUM('S\d+.uL3\.LNI\.Winners.8')))	
	PS1_LNI	=	1 - PS0_LNI - PS2_LNI	
	PS2_LNI	=	.temp_LNI_sum / (.CrClk * num_L3_Slices)	
	PS2_LNI_BW	=	.temp_LNI_weighted_sum / (LNI_max_ports * .temp_LNI_sum)	
#LNE				
	PS0_LNE	=	D(SUM('S\d+.uL3\.IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	.temp_LNE_weighted_sum	=	(D(SUM('S\d+.uL3\.LNE\.Winners.1')) * 1) + (D(SUM('S\d+.uL3\.LNE\.Winners.2')) * 2) + (D(SUM('S\d+.uL3\.LNE\.Winners.3')) * 3) + (D(SUM('S\d+.uL3\.LNE\.Winners.4')) * 4) + (D(SUM('S\d+.uL3\.LNE\.Winners.5')) * 5) + (D(SUM('S\d+.uL3\.LNE\.Winners.6')) * 6) + (D(SUM('S\d+.uL3\.LNE\.Winners.7')) * 7) + (D(SUM('S\d+.uL3\.LNE\.Winners.8')) * 8)	#assuming the max ports for any config cannot exceed 8. need to change this to be more elegant
	.temp_LNE_sum	=	(D(SUM('S\d+.uL3\.LNE\.Winners.1'))) + (D(SUM('S\d+.uL3\.LNE\.Winners.2'))) + (D(SUM('S\d+.uL3\.LNE\.Winners.3'))) + (D(SUM('S\d+.uL3\.LNE\.Winners.4'))) + (D(SUM('S\d+.uL3\.LNE\.Winners.5'))) + (D(SUM('S\d+.uL3\.LNE\.Winners.6'))) + (D(SUM('S\d+.uL3\.LNE\.Winners.7'))) + (D(SUM('S\d+.uL3\.LNE\.Winners.8')))	
	PS1_LNE	=	1 - PS0_LNE - PS2_LNE	
	PS2_LNE	=	.temp_LNE_sum / (.CrClk * num_L3_Slices)	
	PS2_LNE_BW	=	.temp_LNE_weighted_sum / (LNE_max_ports * .temp_LNE_sum)	
#LNICS				
	.temp_PS0_LNICS	=	D(SUM('S\d+.uL3\.IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS0_LNICS	=	(D(SUM('S\d+.uL3\.LNICS\.Winners.\d+')) > 0 ) ? .temp_PS0_LNICS : 1	#Force PS0 to be 1 for GT2
	.temp_LNICS_weighted_sum	=	(D(SUM('S\d+.uL3\.LNICS\.Winners.1')) * 1) + (D(SUM('S\d+.uL3\.LNICS\.Winners.2')) * 2) + (D(SUM('S\d+.uL3\.LNICS\.Winners.3')) * 3) + (D(SUM('S\d+.uL3\.LNICS\.Winners.4')) * 4) + (D(SUM('S\d+.uL3\.LNICS\.Winners.5')) * 5) + (D(SUM('S\d+.uL3\.LNICS\.Winners.6')) * 6) + (D(SUM('S\d+.uL3\.LNICS\.Winners.7')) * 7) + (D(SUM('S\d+.uL3\.LNICS\.Winners.8')) * 8)	#assuming the max ports for any config cannot exceed 8. need to change this to be more elegant
	.temp_LNICS_sum	=	(D(SUM('S\d+.uL3\.LNICS\.Winners.1'))) + (D(SUM('S\d+.uL3\.LNICS\.Winners.2'))) + (D(SUM('S\d+.uL3\.LNICS\.Winners.3'))) + (D(SUM('S\d+.uL3\.LNICS\.Winners.4'))) + (D(SUM('S\d+.uL3\.LNICS\.Winners.5'))) + (D(SUM('S\d+.uL3\.LNICS\.Winners.6'))) + (D(SUM('S\d+.uL3\.LNICS\.Winners.7'))) + (D(SUM('S\d+.uL3\.LNICS\.Winners.8')))	
	PS1_LNICS	=	1 - PS0_LNICS - PS2_LNICS	
	PS2_LNICS	=	.temp_LNICS_sum / (.CrClk * num_L3_Slices)	
	PS2_LNICS_BW	=	(.temp_LNICS_sum > 0) ? (.temp_LNICS_weighted_sum / (LNICS_max_ports * .temp_LNICS_sum)) : 0	#fixed the divide by 0 issue
#LNECS				
	.temp_PS0_LNECS	=	D(SUM('S\d+.uL3\.IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS0_LNECS	=	(D(SUM('S\d+.uL3\.LNECS\.Winners.\d+')) > 0 ) ? .temp_PS0_LNECS : 1	#Force PS0 to be 1 for GT2
	.temp_LNECS_weighted_sum	=	(D(SUM('S\d+.uL3\.LNECS\.Winners.1')) * 1) + (D(SUM('S\d+.uL3\.LNECS\.Winners.2')) * 2) + (D(SUM('S\d+.uL3\.LNECS\.Winners.3')) * 3) + (D(SUM('S\d+.uL3\.LNECS\.Winners.4')) * 4) + (D(SUM('S\d+.uL3\.LNECS\.Winners.5')) * 5) + (D(SUM('S\d+.uL3\.LNECS\.Winners.6')) * 6) + (D(SUM('S\d+.uL3\.LNECS\.Winners.7')) * 7) + (D(SUM('S\d+.uL3\.LNECS\.Winners.8')) * 8)	#assuming the max ports for any config cannot exceed 8. need to change this to be more elegant
	.temp_LNECS_sum	=	(D(SUM('S\d+.uL3\.LNECS\.Winners.1'))) + (D(SUM('S\d+.uL3\.LNECS\.Winners.2'))) + (D(SUM('S\d+.uL3\.LNECS\.Winners.3'))) + (D(SUM('S\d+.uL3\.LNECS\.Winners.4'))) + (D(SUM('S\d+.uL3\.LNECS\.Winners.5'))) + (D(SUM('S\d+.uL3\.LNECS\.Winners.6'))) + (D(SUM('S\d+.uL3\.LNECS\.Winners.7'))) + (D(SUM('S\d+.uL3\.LNECS\.Winners.8')))	
	PS1_LNECS	=	1 - PS0_LNECS - PS2_LNECS	
	PS2_LNECS	=	.temp_LNECS_sum / (.CrClk * num_L3_Slices)	
	PS2_LNECS_BW	=	(.temp_LNECS_sum > 0) ? (.temp_LNECS_weighted_sum / (LNECS_max_ports * .temp_LNECS_sum)) : 0	#fixed the divide by 0 issue
#L3Other				
	PS0_L3BankOther	=	D(SUM('S\d+.uL3\.IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS1_L3BankOther	=	1 - PS0_L3BankOther - PS2_L3BankOther	
	PS2_L3BankOther	=	((D(SUM('@ANY_L3BANK@DataRamRd')) + D(SUM('@ANY_L3BANK@DataRamWr')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk * num_L3_Slices * numL3Banks)) + ((D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW'))) / (16 * .CrClk * num_L3_Slices * numL3Banks))	
#L3DOP				
	PS0_L3_Bank_DOP	=	0	
	PS1_L3_Bank_DOP	=	0	
	PS2_L3_Bank_DOP	=	1	#No DOP gating in L3
#L3DFX				
	PS0_L3_Bank_DFX	=	D(SUM('S\d+.uL3\.IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS1_L3_Bank_DFX	=	1 - PS0_L3_Bank_DFX - PS2_L3_Bank_DFX	
	PS2_L3_Bank_DFX	=	((D(SUM('@ANY_L3BANK@DataRamRd')) + D(SUM('@ANY_L3BANK@DataRamWr')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk * num_L3_Slices * numL3Banks)) + ((D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW'))) / (16 * .CrClk * num_L3_Slices * numL3Banks))	
#L3SMALL				
	PS0_L3_Bank_SMALL	=	D(SUM('S\d+.uL3\.IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS1_L3_Bank_SMALL	=	1 - PS0_L3_Bank_SMALL - PS2_L3_Bank_SMALL	
	PS2_L3_Bank_SMALL	=	((D(SUM('@ANY_L3BANK@DataRamRd')) + D(SUM('@ANY_L3BANK@DataRamWr')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk * num_L3_Slices * numL3Banks)) + ((D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW'))) / (16 * .CrClk * num_L3_Slices * numL3Banks))	
#L3GLUE				
	PS0_L3_Bank_GLUE	=	D(SUM('S\d+.uL3\.IdleCount.2xCrClock')) / (.CrClk2x * num_L3_Slices)	
	PS1_L3_Bank_GLUE	=	1 - PS0_L3_Bank_GLUE - PS2_L3_Bank_GLUE	
	PS2_L3_Bank_GLUE	=	((D(SUM('@ANY_L3BANK@DataRamRd')) + D(SUM('@ANY_L3BANK@DataRamWr')) + D(SUM('@ANY_L3BANK@DataRamAtomic'))) / (.CrClk * num_L3_Slices * numL3Banks)) + ((D(SUM('@ANY_L3BANK@HBDataRamUrbRdDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbWrDW')) + D(SUM('@ANY_L3BANK@HBDataRamUrbAtomicDW'))) / (16 * .CrClk * num_L3_Slices * numL3Banks))	
