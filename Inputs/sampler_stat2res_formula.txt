#Unit	GSIM residency			
#Instance Counts				
	numSamplers	=	knob.global.NumSlices * knob.S0.NumSubSlices	
	num_Sampler_FL	=	numSamplers	
	num_Sampler_PL	=	numSamplers	
	num_Sampler_SC	=	numSamplers	
	num_Sampler_SC Cache	=	numSamplers	
	num_Sampler_ST	=	numSamplers	
	num_Sampler_DG	=	numSamplers	
	num_Sampler_SI	=	numSamplers	
	num_Sampler_SO	=	numSamplers	
	num_Sampler_DM	=	numSamplers	
	num_Sampler_BDM	=	numSamplers	
	num_Sampler_FT	=	numSamplers	
	num_Sampler_MT	=	numSamplers	
	num_Sampler_MT_Cache	=	numSamplers	
	num_Sampler_SVSM	=	numSamplers	
	num_Sampler_Media	=	numSamplers	
	num_Sampler_Glue	=	numSamplers	
#Generic				
	 @ANY_SAMPLER@	=	S\d+\.SS\d+\.uSampler\.	
	 @CLOCKS@	=	CrClock.Clocks	
	 @2XCLOCKS@	=	2xCrClock.Clocks	
#FL				
	PS0_FL	=	SUM('@ANY_SAMPLER@pwr_fl_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS1_FL	=	1 - (PS0_FL + PS2_FL_Gather4 + PS2_FL_SampleC_Gather4C + PS2_FL_Data_Dep_Bypass_Bilinear + PS2_FL_Data_Dep_Bypass_Trilinear + PS2_FL_Data_Dep_Bypass_Aniso + PS2_FL_Data_Dep_Bypass_FastAniso + PS2_FL_SampleC_Gather4C_Bypass + PS2_FL_Nearest_Gather4_Bypass + PS2_FL_Data_Dep_Bypass_Else + PS2_FL_FastLinear + PS2_FL_Bilinear_Float16 + PS2_FL_Bilinear_Float32 + PS2_FL_Bilinear_Else + PS2_FL_Trilinear_Float16 + PS2_FL_Trilinear_Float32 + PS2_FL_Trilinear_Else + PS2_FL_Aniso_Float16 + PS2_FL_Aniso_Float32 + PS2_FL_Aniso_Else + PS2_FL_FastAniso_Float16 + PS2_FL_FastAniso_Float32 + PS2_FL_FastAniso_Else + PS2_FL_Else)	
	PS2_FL_Gather4	=	SUM('@ANY_SAMPLER@pwr_fl_gather4\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_FL_SampleC_Gather4C	=	SUM('@ANY_SAMPLER@pwr_fl_sample_c_gather4_c\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_FL_SampleC_Gather4C_Bypass	=	0	#Next phase implementation
	PS2_FL_Nearest_Gather4_Bypass	=	SUM('@ANY_SAMPLER@pwr_fl_nearest_gather4\.CrClock') / (numSamplers * @CLOCKS@)	
	.bypass_Bilinear_Float16	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_Bilinear_Float16\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_Bilinear_Float32	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_Bilinear_Float32\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_Bilinear_Else	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_Bilinear_Else-Formatsize\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_Trilinear_Float16	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_Trilinear_Float16\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_Trilinear_Float32	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_Trilinear_Float32\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_Trilinear_Else	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_Trilinear_Else-Formatsize\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_Aniso_Float16	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_Anisotropic_Float16\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_Aniso_Float32	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_Anisotropic_Float32\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_Aniso_Else	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_Anisotropic_Else-Formatsize\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_FastAniso_Float16	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_FastAniso_Float16\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_FastAniso_Float32	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_FastAniso_Float32\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_FastAniso_Else	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_FastAniso_Else-Formatsize\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_FastLinear_Float16	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_FastLinear_Float16\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_FastLinear_Float32	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_FastLinear_Float32\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.bypass_FastLinear_Else	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_FastLinear_Else-Formatsize\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	PS2_FL_Data_Dep_Bypass_Bilinear	=	.bypass_Bilinear_Float16 + .bypass_Bilinear_Float32 + .bypass_Bilinear_Else	
	PS2_FL_Data_Dep_Bypass_Trilinear	=	.bypass_Trilinear_Float16 + .bypass_Trilinear_Float32 + .bypass_Trilinear_Else	
	PS2_FL_Data_Dep_Bypass_Aniso	=	.bypass_Anisotropic_Float16 + .bypass_Anisotropic_Float32 + .bypass_Anisotropic_Else	
	PS2_FL_Data_Dep_Bypass_FastAniso	=	.bypass_FastAniso_Float16 + .bypass_FastAniso_Float32 + .bypass_FastAniso_Else	
	PS2_FL_Data_Dep_Bypass_FastLinear	=	.bypass_FastLinear_Float16 + .bypass_FastLinear_Float32 + .bypass_FastLinear_Else	
	PS2_FL_Data_Dep_Bypass_Else	=	SUM('@ANY_SAMPLER@pwr_fl_data_dep_bypass_Else\.CrClock') / (16 * numSamplers * @CLOCKS@)	
	.total_Bilinear_Float16	=	SUM('@ANY_SAMPLER@pwr_fl_Bilinear_Float16\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_Bilinear_Float32	=	SUM('@ANY_SAMPLER@pwr_fl_Bilinear_Float32\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_Bilinear_Else	=	SUM('@ANY_SAMPLER@pwr_fl_Bilinear_Else-Formatsize\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_Trilinear_Float16	=	SUM('@ANY_SAMPLER@pwr_fl_Trilinear_Float16\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_Trilinear_Float32	=	SUM('@ANY_SAMPLER@pwr_fl_Trilinear_Float32\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_Trilinear_Else	=	SUM('@ANY_SAMPLER@pwr_fl_Trilinear_Else-Formatsize\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_Aniso_Float16	=	SUM('@ANY_SAMPLER@pwr_fl_Anisotropic_Float16\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_Aniso_Float32	=	SUM('@ANY_SAMPLER@pwr_fl_Anisotropic_Float32\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_Aniso_Else	=	SUM('@ANY_SAMPLER@pwr_fl_Anisotropic_Else-Formatsize\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_FastAniso_Float16	=	SUM('@ANY_SAMPLER@pwr_fl_FastAniso_Float16\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_FastAniso_Float32	=	SUM('@ANY_SAMPLER@pwr_fl_FastAniso_Float32\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_FastAniso_Else	=	SUM('@ANY_SAMPLER@pwr_fl_FastAniso_Else-Formatsize\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_FastLinear_Float16	=	SUM('@ANY_SAMPLER@pwr_fl_FastLinear_Float16\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_FastLinear_Float32	=	SUM('@ANY_SAMPLER@pwr_fl_FastLinear_Float32\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_FastLinear_Else	=	SUM('@ANY_SAMPLER@pwr_fl_FastLinear_Else-Formatsize\.CrClock') / (numSamplers * @CLOCKS@)	
	.total_Else	=	SUM('@ANY_SAMPLER@pwr_fl_else\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_FL_Bilinear_Float16	=	.total_Bilinear_Float16 - .bypass_Bilinear_Float16	
	PS2_FL_Bilinear_Float32	=	.total_Bilinear_Float32 - .bypass_Bilinear_Float32	
	PS2_FL_Bilinear_Else	=	.total_Bilinear_Else - .bypass_Bilinear_Else	
	PS2_FL_Trilinear_Float16	=	.total_Trilinear_Float16 - .bypass_Trilinear_Float16	
	PS2_FL_Trilinear_Float32	=	.total_Trilinear_Float32 - .bypass_Trilinear_Float32	
	PS2_FL_Trilinear_Else	=	.total_Trilinear_Else - .bypass_Trilinear_Else	
	PS2_FL_Aniso_Float16	=	.total_Anisotropic_Float16 - .bypass_Anisotropic_Float16	
	PS2_FL_Aniso_Float32	=	.total_Anisotropic_Float32 - .bypass_Anisotropic_Float32	
	PS2_FL_Aniso_Else	=	.total_Anisotropic_Else - .bypass_Anisotropic_Else	
	PS2_FL_FastAniso_Float16	=	.total_FastAniso_Float16 - .bypass_FastAniso_Float16	
	PS2_FL_FastAniso_Float32	=	.total_FastAniso_Float32 - .bypass_FastAniso_Float32	
	PS2_FL_FastAniso_Else	=	.total_FastAniso_Else - .bypass_FastAniso_Else	
	PS2_FL_FastLinear_Float16	=	.total_FastLinear_Float16 - .bypass_FastLinear_Float16	
	PS2_FL_FastLinear_Float32	=	.total_FastLinear_Float32 - .bypass_FastLinear_Float32	
	PS2_FL_FastLinear_Else	=	.total_FastLinear_Else - .bypass_FastLinear_Else	
	PS2_FL_Else	=	.total_Else - PS2_FL_Data_Dep_Bypass_Else	
#PL				
	PS0_PL	=	SUM('@ANY_SAMPLER@pwr_pl_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS1_PL	=	1 - (PS0_PL + PS2_PL_Sample_L_EWA_Float + PS2_PL_Sample_L_EWA_MipCount0 + PS2_PL_Gather4PO_EWA_Float + PS2_PL_LD_EWA_Float + PS2_PL_Bilinear_EWA_Float + PS2_PL_Trilinear_EWA_Float + PS2_PL_Aniso_EWA_Float + PS2_PL_Else)	
	PS2_PL_Sample_L	=	SUM('@ANY_SAMPLER@pwr_pl_sample_l\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_PL_Sample_L_MipCount0	=	SUM('@ANY_SAMPLER@pwr_pl_sample_l_mipcount0\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_PL_Gather4PO	=	SUM('@ANY_SAMPLER@pwr_pl_gather4po\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_PL_LD	=	SUM('@ANY_SAMPLER@pwr_pl_ld\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_PL_Bilinear	=	SUM('@ANY_SAMPLER@pwr_pl_Bilinear_Legacy-Aniso\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_PL_Bilinear_EWA	=	SUM('@ANY_SAMPLER@pwr_pl_Bilinear_EWA-Aniso\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_PL_Trilinear	=	SUM('@ANY_SAMPLER@pwr_pl_Trilinear_Legacy-Aniso\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_PL_Trilinear_EWA	=	SUM('@ANY_SAMPLER@pwr_pl_Trilinear_EWA-Aniso\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_PL_Aniso	=	SUM('@ANY_SAMPLER@pwr_pl_Aniso_Legacy-Aniso\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_PL_Aniso_EWA	=	SUM('@ANY_SAMPLER@pwr_pl_Aniso_EWA-Aniso\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_PL_Else	=	SUM('@ANY_SAMPLER@pwr_pl_else\.CrClock') / (numSamplers * @CLOCKS@)	
#SC				
	PS0_SC	=	SUM('@ANY_SAMPLER@pwr_sc_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS1_SC	=	1- (PS2_SC_NearestMode_32BPT + PS2_SC_NearestMode_64BPT + PS2_SC_NearestMode_128BPT + PS2_SC_FastLinear_32BPT + PS2_SC_FastLinear_64BPT + PS2_SC_FastLinear_128BPT + PS2_SC_FastAniso_32BPT + PS2_SC_FastAniso_64BPT + PS2_SC_FastAniso_128BPT + PS2_SC_Bilinear_Trilinear_Aniso_32BPT + PS2_SC_Bilinear_Trilinear_Aniso_64BPT + PS2_SC_Bilinear_Trilinear_Aniso_128BPT + PS2_SC_Else)	
	PS2_SC_NearestMode_32BPT	=	SUM('@ANY_SAMPLER@pwr_sc_Nearest_32BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_SC_NearestMode_64BPT	=	SUM('@ANY_SAMPLER@pwr_sc_Nearest_64BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_SC_NearestMode_128BPT	=	SUM('@ANY_SAMPLER@pwr_sc_Nearest_128BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_SC_FastLinear_32BPT	=	SUM('@ANY_SAMPLER@pwr_sc_FastLinear_32BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_SC_FastLinear_64BPT	=	SUM('@ANY_SAMPLER@pwr_sc_FastLinear_64BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_SC_FastLinear_128BPT	=	SUM('@ANY_SAMPLER@pwr_sc_FastLinear_128BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_SC_FastAniso_32BPT	=	SUM('@ANY_SAMPLER@pwr_sc_FastAniso_32BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_SC_FastAniso_64BPT	=	SUM('@ANY_SAMPLER@pwr_sc_FastAniso_64BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_SC_FastAniso_128BPT	=	SUM('@ANY_SAMPLER@pwr_sc_FastAniso_128BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_SC_Bilinear_Trilinear_Aniso_32BPT	=	(SUM('@ANY_SAMPLER@pwr_sc_Bilinear_32BPT\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Trilinear_32BPT\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Anisotropic_32BPT\.CrClock')) / (numSamplers * @CLOCKS@)	
	PS2_SC_Bilinear_Trilinear_Aniso_64BPT	=	(SUM('@ANY_SAMPLER@pwr_sc_Bilinear_64BPT\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Trilinear_64BPT\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Anisotropic_64BPT\.CrClock')) / (numSamplers * @CLOCKS@)	
	PS2_SC_Bilinear_Trilinear_Aniso_128BPT	=	(SUM('@ANY_SAMPLER@pwr_sc_Bilinear_128BPT\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Trilinear_128BPT\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Anisotropic_128BPT\.CrClock')) / (numSamplers * @CLOCKS@)	
	PS2_SC_Else	=	SUM('@ANY_SAMPLER@pwr_sc_else\.CrClock') / (numSamplers * @CLOCKS@)	
#SC Cache				
	PS0_SC_DataRam_IDLE	=	1 - (PS2_SC_DataRam_READ + PS2_SC_DataRam_WRITE)	#No stall in SC
	PS2_SC_DataRam_READ	=	(SUM('@ANY_SAMPLER@pwr_sc_Bank0\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Bank1\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Bank2\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Bank3\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Bank4\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Bank5\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Bank6\.CrClock') + SUM('@ANY_SAMPLER@pwr_sc_Bank7\.CrClock')) / (8 * numSamplers * @CLOCKS@)	# 8 banks in SC
	PS2_SC_DataRam_WRITE	=	SUM('@ANY_SAMPLER@pwr_sc_data_ram_write\.CrClock') / (numSamplers * @CLOCKS@)	
	PS0_SC_LatFifo_IDLE	=	SUM('@ANY_SAMPLER@pwr_sc_latfifo_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_SC_LatFifo_READ	=	SUM('@ANY_SAMPLER@SC-LatencyFifo\.pushed') / (numSamplers * @CLOCKS@)	
	PS2_SC_LatFifo_WRITE	=	SUM('@ANY_SAMPLER@SC-LatencyFifo\.popped') / (numSamplers * @CLOCKS@)	
	PS2_SC_LatFifo_READWRITE	=	SUM('@ANY_SAMPLER@pwr_sc_latfifo_rw\.CrClock') / (numSamplers * @CLOCKS@)	
#ST				
	PS0_ST	=	SUM('@ANY_SAMPLER@pwr_st_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS1_ST	=	1- (PS0_ST + PS2_ST_1Bank_Enable + PS2_ST_2Bank_Enable + PS2_ST_3Bank_Enable + PS2_ST_4Bank_Enable)	
	PS2_ST_1Bank_Enable 	=	(SUM('@ANY_SAMPLER@pwr_StL1Bankreq1Hit1Miss0\.CrClock') + SUM('@ANY_SAMPLER@pwr_StL1Bankreq1Hit0Miss1\.CrClock'))/ (numSamplers * @CLOCKS@)	
	PS2_ST_2Bank_Enable 	=	(SUM('@ANY_SAMPLER@pwr_StL1Bankreq2Hit2Miss0\.CrClock') + SUM('@ANY_SAMPLER@pwr_StL1Bankreq2Hit1Miss1\.CrClock') + SUM('@ANY_SAMPLER@pwr_StL1Bankreq2Hit0Miss2\.CrClock'))/ (numSamplers * @CLOCKS@)	
	PS2_ST_3Bank_Enable 	=	(SUM('@ANY_SAMPLER@pwr_StL1Bankreq3Hit3Miss0\.CrClock') + SUM('@ANY_SAMPLER@pwr_StL1Bankreq3Hit2Miss1\.CrClock') + SUM('@ANY_SAMPLER@pwr_StL1Bankreq3Hit1Miss2\.CrClock') + SUM('@ANY_SAMPLER@pwr_StL1Bankreq3Hit0Miss3\.CrClock'))/ (numSamplers * @CLOCKS@)	
	PS2_ST_4Bank_Enable 	=	(SUM('@ANY_SAMPLER@pwr_StL1Bankreq4Hit4Miss0\.CrClock') + SUM('@ANY_SAMPLER@pwr_StL1Bankreq4Hit3Miss1\.CrClock') + SUM('@ANY_SAMPLER@pwr_StL1Bankreq4Hit2Miss2\.CrClock') + SUM('@ANY_SAMPLER@pwr_StL1Bankreq4Hit1Miss3\.CrClock') + SUM('@ANY_SAMPLER@pwr_StL1Bankreq4Hit0Miss4\.CrClock'))/ (numSamplers * @CLOCKS@)	
	PS2_ST_1Bank_Enable_SameADD	=	0	#Next phase implementation
#DG				
	PS0_DG	=	SUM('@ANY_SAMPLER@pwr_dg_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS1_DG	=	1 - (PS0_DG + PS2_DG_Volumetric_32BPT + PS2_DG_Volumetric_64BPT + PS2_DG_Volumetric_128BPT + PS2_DG_Gather4_32BPT + PS2_DG_Gather4_64BPT + PS2_DG_Gather4_128BPT + PS2_DG_AnisoLessThanOrEqualTo_8way_32BPT + PS2_DG_AnisoLessThanOrEqualTo_8way_64BPT + PS2_DG_AnisoLessThanOrEqualTo_8way_128BPT + PS2_DG_AnisoGreaterThan_8way_32BPT + PS2_DG_AnisoGreaterThan_8way_64BPT + PS2_DG_AnisoGreaterThan_8way_128BPT + PS2_DG_Trilinear_32BPT + PS2_DG_Trilinear_64BPT + PS2_DG_Trilinear_128BPT + PS2_DG_Bilinear_32BPT + PS2_DG_Bilinear_64BPT + PS2_DG_Bilinear_128BPT + PS2_DG_FastLinear_32BPT + PS2_DG_FastLinear_64BPT + PS2_DG_FastLinear_128BPT + PS2_DG_BabyDG_Enable + PS2_DG_Else)	
	PS2_DG_Volumetric_32BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Volumetric_32BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Volumetric_64BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Volumetric_64BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Volumetric_128BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Volumetric_128BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Gather4_32BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Gather4_32BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Gather4_64BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Gather4_64BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Gather4_128BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Gather4_128BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_AnisoLessThanOrEqualTo_8way_32BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Anisotropic_Aniso_LessThanOrEqualTo_8Ways_32BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_AnisoLessThanOrEqualTo_8way_64BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Anisotropic_Aniso_LessThanOrEqualTo_8Ways_64BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_AnisoLessThanOrEqualTo_8way_128BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Anisotropic_Aniso_LessThanOrEqualTo_8Ways_128BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_AnisoGreaterThan_8way_32BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Anisotropic_Aniso_GreaterThan_8Ways_32BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_AnisoGreaterThan_8way_64BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Anisotropic_Aniso_GreaterThan_8Ways_64BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_AnisoGreaterThan_8way_128BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Anisotropic_Aniso_GreaterThan_8Ways_128BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Trilinear_32BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Trilinear_32BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Trilinear_64BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Trilinear_64BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Trilinear_128BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Trilinear_128BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Bilinear_32BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Bilinear_32BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Bilinear_64BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Bilinear_64BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Bilinear_128BPT	=	SUM('@ANY_SAMPLER@pwr_dg_Bilinear_128BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_FastLinear_32BPT	=	SUM('@ANY_SAMPLER@pwr_dg_FastLinear_32BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_FastLinear_64BPT	=	SUM('@ANY_SAMPLER@pwr_dg_FastLinear_64BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_FastLinear_128BPT	=	SUM('@ANY_SAMPLER@pwr_dg_FastLinear_128BPT\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_BabyDG_Enable	=	SUM('@ANY_SAMPLER@pwr_dg_babydg\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DG_Else	=	SUM('@ANY_SAMPLER@pwr_dg_else\.CrClock') / (numSamplers * @CLOCKS@)	
#SI				
	PS0_SI	=	SUM('@ANY_SAMPLER@pwr_si_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS1_SI	=	1 - (PS0_SI + PS2_SI_ANYPIXELMODE)	
	PS2_SI_ANYPIXELMODE	=	(SUM('@ANY_SAMPLER@pwr_si_ldmode\.CrClock') + SUM('@ANY_SAMPLER@pwr_si_sampleg\.CrClock') + SUM('@ANY_SAMPLER@pwr_si_media\.CrClock') + SUM('@ANY_SAMPLER@pwr_si_else\.CrClock'))/ (numSamplers * @CLOCKS@)	
#SO				
	PS0_SO	=	SUM('@ANY_SAMPLER@pwr_so_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS1_SO	=	1 - (PS0_SO + PS2_SO_ANYPIXELMODE)	
	PS2_SO_ANYPIXELMODE	=	(SUM('@ANY_SAMPLER@SO-RowOutBuffer0\.popped') + SUM('@ANY_SAMPLER@SO-RowOutBuffer1\.popped'))/ (2 * numSamplers * @CLOCKS@)	
#DM				
	PS0_DM	=	SUM('@ANY_SAMPLER@pwr_dm_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS1_DM	=	1- (PS0_DM + PS2_DM_BC1_5 + PS2_DM_BC6_7 + PS2_DM_BC1_3_SRGB + PS2_DM_BC7_SRGB + PS2_DM_ETC + PS2_DM_Else + PS2_DM_HIZ + PS2_DM_Z + PS2_DM_LOSSLESS + PS2_DM_ASTC_LDR_2D + PS2_DM_ASTC_LDR_3D + PS2_DM_ASTC_HDR_2D + PS2_DM_ASTC_HDR_3D + PS2_DM_Bypass + PS2_DM_Expanded + PS2_DM_Expanded_BYPASS + PS2_DM_Compressed_BYPASS)	
	PS2_DM_BC1_5	=	SUM('@ANY_SAMPLER@pwr_dm_BC1-5\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DM_BC6_7	=	SUM('@ANY_SAMPLER@pwr_dm_BC6-7\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DM_BC1_3_SRGB	=	SUM('@ANY_SAMPLER@pwr_dm_BC1-3-SRGB\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DM_BC7_SRGB	=	SUM('@ANY_SAMPLER@pwr_dm_BC7-SRGB\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DM_ETC	=	SUM('@ANY_SAMPLER@pwr_dm_ETC\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DM_Else	=	SUM('@ANY_SAMPLER@pwr_dm_Else\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DM_HIZ	=	0	#Not currently supported in GSIM
	PS2_DM_Z	=	0	
	PS2_DM_LOSSLESS	=	0	
	PS2_DM_ASTC_LDR_2D	=	0	
	PS2_DM_ASTC_LDR_3D	=	0	
	PS2_DM_ASTC_HDR_2D	=	0	
	PS2_DM_ASTC_HDR_3D	=	0	
	PS2_DM_Bypass	=	SUM('@ANY_SAMPLER@pwr_dm_bypass\.CrClock') / (numSamplers * @CLOCKS@)	#Non compressed, non expanded bypass
	PS2_DM_Expanded	=	SUM('@ANY_SAMPLER@pwr_dm_expanded\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DM_Expanded_BYPASS	=	SUM('@ANY_SAMPLER@pwr_dm_bypass_expanded\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_DM_Compressed_BYPASS	=	SUM('@ANY_SAMPLER@pwr_dm_bypass_compressed\.CrClock') / (numSamplers * @CLOCKS@)	

#BDM
	.temp_PS2_BDM_Expanded_BYPASS = SUM('@ANY_SAMPLER@pwr_dm_bypass_expanded\.CrClock') / (numSamplers * @CLOCKS@)
	.temp_PS2_BDM_Compressed_BYPASS = SUM('@ANY_SAMPLER@pwr_dm_bypass_compressed\.CrClock') / (numSamplers * @CLOCKS@)
	PS0_BDM			= 1 - (.temp_PS2_BDM_Expanded_BYPASS + .temp_PS2_BDM_Compressed_BYPASS)
	PS1_BDM			= 	0
	PS2_BDM_Expanded_BYPASS  =       .temp_PS2_BDM_Expanded_BYPASS
        PS2_BDM_Compressed_BYPASS        =       .temp_PS2_BDM_Compressed_BYPASS


#FT				
	PS0_FT	=	SUM('@ANY_SAMPLER@pwr_ft_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS1_FT	=	1 - (PS0_FT + PS2_FT)	
	PS2_FT	=	(@CLOCKS@ - SUM('@ANY_SAMPLER@pwr_ft_stalled_or_idle_ungated_count\.CrClock')) / (numSamplers * @CLOCKS@)	
#MT				
	PS0_MT	=	SUM('@ANY_SAMPLER@pwr_mt_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS1_MT	=	1- (PS0_MT + PS2_MT_BYPASS + PS2_MT_Tile_X + PS2_MT_Tile_Y + PS2_MT_Tile_else)	
	PS2_MT_BYPASS	=	SUM('@ANY_SAMPLER@pwr_mt_bypass\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_MT_Tile_X	=	SUM('@ANY_SAMPLER@pwr_mt_tile_x\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_MT_Tile_Y	=	SUM('@ANY_SAMPLER@pwr_mt_tile_y\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_MT_Tile_else	=	(SUM('@ANY_SAMPLER@pwr_mt_tile_w\.CrClock') + SUM('@ANY_SAMPLER@pwr_mt_tile_else\.CrClock')) / (numSamplers * @CLOCKS@)	
#MT_Cache				
	PS0_MT_LatFifo_IDLE	=	SUM('@ANY_SAMPLER@pwr_mt_latfifo_idle\.CrClock') / (numSamplers * @CLOCKS@)	
	PS2_MT_LatFifo_READ	=	SUM('@ANY_SAMPLER@MT-LatencyFifo\.pushed') / (numSamplers * @CLOCKS@)	
	PS2_MT_LatFifo_WRITE	=	SUM('@ANY_SAMPLER@MT-LatencyFifo\.popped') / (numSamplers * @CLOCKS@)	
	PS2_MT_LatFifo_READWRITE	=	SUM('@ANY_SAMPLER@pwr_mt_latfifo_rw\.CrClock') / (numSamplers * @CLOCKS@)	
	PS0_MT_DataRam_IDLE	=	1 - (PS2_MT_DataRam_READ + PS2_MT_DataRam_WRITE - PS2_MT_DataRam_READWRITE)	#1 - (read + write - read_write)
	PS2_MT_DataRam_READ	=	SUM('@ANY_SAMPLER@MT-ReadDataFifo\.popped') / (numSamplers * @CLOCKS@)	
	PS2_MT_DataRam_WRITE	=	SUM('@ANY_SAMPLER@L3ToMTDataBuffer\.pushed') / (numSamplers * @CLOCKS@)	
	PS2_MT_DataRam_READWRITE	=	SUM('@ANY_SAMPLER@pwr_mt_data_ram_rw\.CrClock') / (numSamplers * @CLOCKS@)	
#SVSM				
	PS0_SVSM	=	1	#Next phase implementation
	PS1_SVSM	=	0	
	PS2_SVSM	=	0	
#Media				
	PS0_Media	=	1	#Next phase implementation
	PS1_Media	=	0	
	PS2_Media	=	0	
#Glue				
	PS0_Glue	=	1	
	PS1_Glue	=	0	
	PS2_Glue	=	0
