#Unit	GSIM residency			Comments
#Instance Counts				
	numHDCs	=	COUNT('knob\.STK\d\.S\d\.SS\d\.uHDC\.NumSlices') + COUNT('knob\.(STK\d+\.)?S\d\.uHDC_\d\.NumSlices')
	num_HDC_HDCREQCMD1	=	numHDCs	
	num_HDC_HDCREQCMD2	=	numHDCs	
	num_HDC_HDCREQDATA	=	numHDCs	
	num_HDC_HDCRET	=	numHDCs	
	num_HDC_HDCTLB	=	numHDCs	
	num_HDC_HDCL1	=	numHDCs	
	num_HDC_HDCL1_CACHE	=	numHDCs	
	num_HDC_DOP	=	numHDCs	
	num_HDC_CLKGLUE	=	numHDCs	
	num_HDC_NONCLKGLUE	=	numHDCs	
	num_HDC_SMALL	=	numHDCs	
	num_HDC_CPunit	=	numHDCs	
	num_HDC_Assign	=	numHDCs	
	num_HDC_Repeater	=	numHDCs	
	num_HDC_DFX	=	numHDCs	
	num_HDC_HDCRET1	=	numHDCs
	num_HDC_HDCRET2	=	numHDCs

#Generic				
	 @ANY_HDC@	=	(STK\d+\.S\d+\.uHDC_\d+\.|STK\d\.S\d\.SS\d\.uHDC\.|S\d+\.uHDC_\d+\.)	
	 .CrClk	=	D(CrClock.Clocks)	
	 .CrClk2x	=	D(SUM('2xCrClock\.Clocks'))	
	 .HDC_DOP	=	D(SUM('@ANY_HDC@pwr_hdc_idle\.CrClock')) / (numHDCs * .CrClk)	
	 @SEQUENCED_TYPE_READ@	=	(TypedSurfRead|TypedAtomicOp|TypedAtomicOp4x2)	
	 @SEQUENCED_TYPE_WRITE@	=	(TypedSurfWrite|TypedAtomicOp|TypedAtomicOp4x2)	
	 @SEQUENCED_ELSE_READ@	=	(DWordScatteredRead|ByteScatteredRead|ScatteredRead_A64|UntypedSurfRead|UntypedSurfRead_A64|UntypedAtomicOp|UntypedAtomicOp4x2|UntypedAtomicFloatAdd|UntypedAtomicOp_A64|UntypedAtomicOp4x2_A64|UntypedAtomicFloatAdd_A64)	
	 @SEQUENCED_ELSE_WRITE@	=	(DWordScatteredWrite|ByteScatteredWrite|ScatteredWrite_A64|UntypedSurfWrite|UntypedSurfWrite_A64|UntypedAtomicOp|UntypedAtomicOp4x2|UntypedAtomicFloatAdd|UntypedAtomicOp_A64|UntypedAtomicOp4x2_A64|UntypedAtomicFloatAdd_A64)	
	 @NONSEQUENCED_READ@	=	(OWordBlockRead|UnalignedOWordBlockRead|OWordDualBlockRead|TransposeRead|MediaBlockRead|AtomicCounterOp|AtomicCounterOp4x2|BlockRead_A64|ScratchOWordBlockRead|ScratchDWordScatteredRead|RenderTargetRead|ReadSurfaceInfo|UrbHWordRead|UrbOWordRead|UrbSimd8Read|UrbAtomicMov|UrbAtomicInc|UrbAtomicAdd)	
	 @NONSEQUENCED_WRITE@	=	(MemoryFence|OWordBlockWrite|OWordDualBlockWrite|MediaBlockWrite_NIECP|AtomicCounterOp|AtomicCounterOp4x2|BlockWrite_A64|ScratchOWordBlockWrite|ScratchDWordScatteredWrite|UrbHWordWrite|UrbOWordWrite|UrbSimd8Write|UrbAtomicMov|UrbAtomicInc|UrbAtomicAdd)	
	 @ANY_TLB@	=	(TLB|HDCTlb)	
	@READ_MISS@	=	(_Read_Misses|_Read_misses)
	@WRITE_MISS@	=	(_Write_Misses|_Write_misses)

				
#HDCREQCMD1				
	PS0_HDC_ReqCmd1_DOP	=	.HDC_DOP	
	PS0_HDC_ReqCmd1	=	(D(SUM('@ANY_HDC@HDCReq_cmd_idle_cycle\.CrClock')) / (numHDCs * .CrClk)) - .HDC_DOP	
	PS1_HDC_ReqCmd1	=	1 - (PS0_HDC_ReqCmd1_DOP + PS0_HDC_ReqCmd1 + PS2_HDC_ReqCmd1_Sequenced_Typed_Read + PS2_HDC_ReqCmd1_Sequenced_Typed_Write + PS2_HDC_ReqCmd1_Sequenced_Else_Data_Read + PS2_HDC_ReqCmd1_Sequenced_Else_Data_Write + PS2_HDC_ReqCmd1_Sequenced_Else_SLM_Read + PS2_HDC_ReqCmd1_Sequenced_Else_SLM_Write + PS2_HDC_ReqCmd1_NonSequenced_Read + PS2_HDC_ReqCmd1_NonSequenced_Write + PS2_HDC_ReqCmd1_Other_GW_CPSS) 

	PS2_HDC_ReqCmd1_Sequenced_Typed_Read	=	D(SUM('@ANY_HDC@Transactions_(Data|SLM)\.CrClock\.@SEQUENCED_TYPE_READ@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd1_Sequenced_Typed_Write	=	D(SUM('@ANY_HDC@Transactions_(Data|SLM)\.CrClock\.@SEQUENCED_TYPE_WRITE@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd1_Sequenced_Else_Data_Read	=	D(SUM('@ANY_HDC@Transactions_Data\.CrClock\.@SEQUENCED_ELSE_READ@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd1_Sequenced_Else_Data_Write	=	D(SUM('@ANY_HDC@Transactions_Data\.CrClock\.@SEQUENCED_ELSE_WRITE@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd1_Sequenced_Else_SLM_Read	=	D(SUM('@ANY_HDC@Transactions_SLM\.CrClock\.@SEQUENCED_ELSE_READ@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd1_Sequenced_Else_SLM_Write	=	D(SUM('@ANY_HDC@Transactions_SLM\.CrClock\.@SEQUENCED_ELSE_WRITE@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd1_NonSequenced_Read	=	D(SUM('@ANY_HDC@Transactions_(Data|SLM)\.CrClock\.@NONSEQUENCED_READ@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd1_NonSequenced_Write	=	D(SUM('@ANY_HDC@Transactions_(Data|SLM)\.CrClock\.@NONSEQUENCED_WRITE@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd1_Other_GW_CPSS	=	(D(SUM('@ANY_HDC@NumGwMsg')) + D(SUM('@ANY_HDC@NumTsgMsg')) + D(SUM('@ANY_HDC@NumPiMsg'))) / (numHDCs * .CrClk)

#HDCREQCMD2				
	PS0_HDC_ReqCmd2_DOP	=	.HDC_DOP	
	PS0_HDC_ReqCmd2	=	(D(SUM('@ANY_HDC@HDCReq_cmd_idle_cycle\.CrClock')) / (numHDCs * .CrClk)) - .HDC_DOP	
	PS1_HDC_ReqCmd2	=	1 - (PS0_HDC_ReqCmd2_DOP + PS0_HDC_ReqCmd2 + PS2_HDC_ReqCmd2_Sequenced_Typed_Read + PS2_HDC_ReqCmd2_Sequenced_Typed_Write + PS2_HDC_ReqCmd2_Sequenced_Else_Data_Read + PS2_HDC_ReqCmd2_Sequenced_Else_Data_Write + PS2_HDC_ReqCmd2_Sequenced_Else_SLM_Read + PS2_HDC_ReqCmd2_Sequenced_Else_SLM_Write + PS2_HDC_ReqCmd2_NonSequenced_Read + PS2_HDC_ReqCmd2_NonSequenced_Write)	
	PS2_HDC_ReqCmd2_Sequenced_Typed_Read	=	D(SUM('@ANY_HDC@Transactions_(Data|SLM)\.CrClock\.@SEQUENCED_TYPE_READ@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd2_Sequenced_Typed_Write	=	D(SUM('@ANY_HDC@Transactions_(Data|SLM)\.CrClock\.@SEQUENCED_TYPE_WRITE@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd2_Sequenced_Else_Data_Read	=	D(SUM('@ANY_HDC@Transactions_Data\.CrClock\.@SEQUENCED_ELSE_READ@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd2_Sequenced_Else_Data_Write	=	D(SUM('@ANY_HDC@Transactions_Data\.CrClock\.@SEQUENCED_ELSE_WRITE@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd2_Sequenced_Else_SLM_Read	=	D(SUM('@ANY_HDC@Transactions_SLM\.CrClock\.@SEQUENCED_ELSE_READ@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd2_Sequenced_Else_SLM_Write	=	D(SUM('@ANY_HDC@Transactions_SLM\.CrClock\.@SEQUENCED_ELSE_WRITE@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd2_NonSequenced_Read	=	D(SUM('@ANY_HDC@Transactions_(Data|SLM)\.CrClock\.@NONSEQUENCED_READ@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqCmd2_NonSequenced_Write	=	D(SUM('@ANY_HDC@Transactions_(Data|SLM)\.CrClock\.@NONSEQUENCED_WRITE@')) / (numHDCs * .CrClk)	
				
#HDCREQDATA				
	PS0_HDC_ReqData_DOP	=	.HDC_DOP	
	PS0_HDC_ReqData	=	(D(SUM('@ANY_HDC@HDCReq_dataret_idle_cycle\.CrClock')) / (numHDCs * .CrClk)) - .HDC_DOP	
	PS1_HDC_ReqData	=	1 - (PS0_HDC_ReqData_DOP + PS0_HDC_ReqData + PS2_HDC_ReqData_Sequenced_Typed_Write + PS2_HDC_ReqData_Sequenced_Else_Data_Write + PS2_HDC_ReqData_Sequenced_Else_SLM_Write + PS2_HDC_ReqData_NonSequenced_Write)	
	PS2_HDC_ReqData_Sequenced_Typed_Write	=	D(SUM('@ANY_HDC@Transactions_(Data|SLM)\.CrClock\.@SEQUENCED_TYPE_WRITE@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqData_Sequenced_Else_Data_Write	=	D(SUM('@ANY_HDC@Transactions_Data\.CrClock\.@SEQUENCED_ELSE_WRITE@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqData_Sequenced_Else_SLM_Write	=	D(SUM('@ANY_HDC@Transactions_SLM\.CrClock\.@SEQUENCED_ELSE_WRITE@')) / (numHDCs * .CrClk)	
	PS2_HDC_ReqData_NonSequenced_Write	=	D(SUM('@ANY_HDC@Transactions_(Data|SLM)\.CrClock\.@NONSEQUENCED_WRITE@')) / (numHDCs * .CrClk)	
				
#HDCRET1
	PS0_HDC_Ret1_DOP	=	.HDC_DOP    
	PS0_HDC_Ret1	=	(D(SUM('@ANY_HDC@RET1_Idle')) / (numHDCs * .CrClk)) - .HDC_DOP  
	PS1_HDC_Ret1	=	(D(SUM('@ANY_HDC@RET1_Stall')) / (numHDCs * .CrClk))    
	PS2_HDC_Ret1_Message	=	D(SUM('@ANY_HDC@RET1_Msg')) / (numHDCs * .CrClk) #Transaction Based Model   
	PS2_HDC_Ret1_MediaBlock	=	D(SUM('@ANY_HDC@RET1_MediaBlk')) / (numHDCs * .CrClk) #Transaction Based Model

#HDCRET2                
	PS0_HDC_Ret2_DOP	=	.HDC_DOP    
	PS0_HDC_Ret2	=	(D(SUM('@ANY_HDC@RET2_Idle')) / (numHDCs * .CrClk)) - .HDC_DOP  
	PS1_HDC_Ret2	=	(D(SUM('@ANY_HDC@RET2_Stall')) / (numHDCs * .CrClk))        
	PS2_HDC_Ret2_Message	=	D(SUM('@ANY_HDC@RET2_Msg')) / (numHDCs * .CrClk) #Transaction Based Model   
	PS2_HDC_Ret2_MediaBlock 	=	D(SUM('@ANY_HDC@RET2_MediaBlk')) / (numHDCs * .CrClk) #Transaction Based Model  
	PS2_HDC_Ret2_Other_GW_DAPB 	=	D(SUM('@ANY_HDC@RET2_GW_DAPB')) / (numHDCs * .CrClk) #Transaction Based Model

#HDCTLB				
	PS0_HDCTLB_DOP	=	0	#HDCTLB is not DOP gated
	PS0_HDCTLB	=	(D(SUM('@ANY_HDC@@ANY_TLB@_idle_cycle\.CrClock')) / (numHDCs * .CrClk)) - PS0_HDCTLB_DOP	
	PS1_HDCTLB	=	1 - (PS0_HDCTLB_DOP + PS0_HDCTLB + PS2_HDCTLB_Read_Hit + PS2_HDCTLB_Read_Miss + PS2_HDCTLB_Write_Hit + PS2_HDCTLB_Write_Miss)	
	PS2_HDCTLB_Read_Hit	=	D(SUM('@ANY_HDC@@ANY_TLB@_Read_Hits')) / (numHDCs * .CrClk)	
	PS2_HDCTLB_Read_Miss	=	D(SUM('@ANY_HDC@@ANY_TLB@@READ_MISS@')) / (numHDCs * .CrClk)	
	PS2_HDCTLB_Write_Hit	=	D(SUM('@ANY_HDC@@ANY_TLB@_Write_Hits')) / (numHDCs * .CrClk)	
	PS2_HDCTLB_Write_Miss	=	D(SUM('@ANY_HDC@@ANY_TLB@@WRITE_MISS@')) / (numHDCs * .CrClk)	
				
#HDCDOP				
	PS0_HDC_DOP	=	.HDC_DOP	
	PS2_HDC_DOP	=	1 - PS0_HDC_DOP	
				
#HDCCLKGlue				
	PS0_HDC_CLKGLUE_DOP	=	.HDC_DOP	
	PS0_HDC_CLKGLUE	=	AVG(PS0_HDC_ReqCmd1, PS0_HDC_ReqCmd2, PS0_HDC_ReqData, PS0_HDC_Ret1, PS0_HDC_Ret2)	#Approximating Glue with HDC Data
	PS2_HDC_CLKGLUE	=	1 - PS0_HDC_CLKGLUE - PS0_HDC_CLKGLUE_DOP	
				
#HDCNONCLKGlue				
	PS0_HDC_NONCLKGLUE_DOP	=	.HDC_DOP	
	PS0_HDC_NONCLKGLUE	=	AVG(PS0_HDC_ReqCmd1, PS0_HDC_ReqCmd2, PS0_HDC_ReqData, PS0_HDC_Ret1, PS0_HDC_Ret2)	#Approximating Glue with HDC Data
	PS2_HDC_NONCLKGLUE	=	1 - PS0_HDC_NONCLKGLUE - PS0_HDC_NONCLKGLUE_DOP	
				
#HDCSmall				
	PS0_HDC_SMALL_DOP	=	.HDC_DOP	
	PS0_HDC_SMALL	=	PS0_HDC_NONCLKGLUE	
	PS2_HDC_SMALL	=	PS2_HDC_NONCLKGLUE	
				
#HDCCPunit				
	PS0_HDC_CPunit_DOP	=	.HDC_DOP	
	PS0_HDC_CPunit	=	PS0_HDC_NONCLKGLUE	
	PS2_HDC_CPunit	=	PS2_HDC_NONCLKGLUE	
				
#HDCAssign				
	PS0_HDC_Assign_DOP	=	.HDC_DOP	
	PS0_HDC_Assign	=	PS0_HDC_NONCLKGLUE	
	PS2_HDC_Assign	=	PS2_HDC_NONCLKGLUE	
				
#HDCRepeater				
	PS0_HDC_Repeater_DOP	=	.HDC_DOP	
	PS0_HDC_Repeater	=	PS0_HDC_NONCLKGLUE	
	PS2_HDC_Repeater	=	PS2_HDC_NONCLKGLUE	
				
#HDCDfx				
	PS0_HDC_DFX_DOP	=	.HDC_DOP	
	PS0_HDC_DFX	=	PS0_HDC_NONCLKGLUE	
	PS2_HDC_DFX	=	PS2_HDC_NONCLKGLUE	
				
				
#HDCL1			
	PS0_HDCL1_DOP	=	.HDC_DOP
	PS0_HDCL1	=	(D(SUM('@ANY_HDC@L1_Idle')) / (numHDCs * .CrClk)) - .HDC_DOP		
	PS1_HDCL1	=	(D(SUM('@ANY_HDC@L1_Stall')) / (numHDCs * .CrClk))		
	PS2_HDCL1_Read_Hit	=	(D(SUM('@ANY_HDC@L1_RdHit')) / (numHDCs * .CrClk))
	PS2_HDCL1_Read_Miss	=	(D(SUM('@ANY_HDC@L1_RdMiss')) / (numHDCs * .CrClk))		
	PS2_HDCL1_Write_Invalidate	=	(D(SUM('@ANY_HDC@L1_WrInv')) / (numHDCs * .CrClk))		
	PS2_HDCL1_Bypass	=	(D(SUM('@ANY_HDC@L1_Bypass')) / (numHDCs * .CrClk))
				
#HDCL1_CACHE				
	#PS2_HDCL1_CACHE_READS	=	D(SUM('@ANY_HDC@HDCL1Hits'))/(numHDCs * .CrClk)	
	#PS2_HDCL1_CACHE_WRITES	=	D(SUM('@ANY_HDC@HDCL1Misses'))/(numHDCs * .CrClk)
	PS2_HDCL1_CACHE_READS	=	(D(SUM('@ANY_HDC@L1EBB_Rd')) / (numHDCs * .CrClk))  #Transactions Based Model
	PS2_HDCL1_CACHE_WRITES	=	(D(SUM('@ANY_HDC@L1EBB_Wr')) / (numHDCs * .CrClk))  #Transactions Based Model	

