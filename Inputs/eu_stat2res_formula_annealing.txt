#Unit	GSIM residency			Comments
#Instance Counts				
	FPS	=	(knob.CrClock.multiplier * 1000000) / D(CrClock.Clocks)	
	numEUs	=	D(SUM('knob\.S\d+\.SS\d+\.R\d+\.NumEus'))	#This includes Slices & SubSlices
	num_EU_FPU	=	numEUs	
	num_EU_EM	=	numEUs	
	num_EU_GA	=	numEUs	
	num_EU_TC	=	numEUs	
	num_EU_GRF	=	numEUs	
	num_EU_DFX	=	numEUs	
	num_EU_SMALL	=	numEUs	
	num_EU_GLUE	=	numEUs	
	num_EU_DOP	=	numEUs	
#Generic				
	 .CrClk	=	D(CrClock.Clocks)	
	 @ANY_EU@	=	S\d+\.SS\d+\.R\d+\.uEU_\d+\.	
	 @ANY_EUPIPE@	=	 @ANY_EU@Pipelines\.	
	 @BYPASS@	=	(masked|sgndiff|expdiff|nan|inf|zero|denorm|round|mpy_by_pwr2)	
	 @HP@	=	(hf|w|uw)	
	FPU_simd1_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Fpu\.\w+\.1\.\w+\.(exec|@BYPASS@)'))	
	FPU_simd2_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Fpu\.\w+\.2\.\w+\.(exec|@BYPASS@)'))	
	FPU_simd4_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Fpu\.\w+\.4\.\w+\.(exec|@BYPASS@)'))	
	.temp_FPU_simd8_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Fpu\.\w+\.8\.\w+\.(exec|@BYPASS@)'))	
	.temp_FPU_simd8_hp_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Fpu\.@HP@\.8\.\w+\.(exec|@BYPASS@)'))	
	FPU_simd8_count	=	.temp_FPU_simd8_count - .temp_FPU_simd8_hp_count	
	FPU_simd8_hp_count	=	.temp_FPU_simd8_hp_count	
	.temp_FPU_simd16_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Fpu\.\w+\.16\.\w+\.(exec|@BYPASS@)'))	
	.temp_FPU_simd16_hp_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Fpu\.@HP@\.16\.\w+\.(exec|@BYPASS@)'))	
	FPU_simd16_count	=	.temp_FPU_simd16_count - .temp_FPU_simd16_hp_count	
	FPU_simd16_hp_count	=	.temp_FPU_simd16_hp_count	
	.temp_FPU_simd32_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Fpu\.\w+\.32\.\w+\.(exec|@BYPASS@)'))	
	.temp_FPU_simd32_hp_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Fpu\.@HP@\.32\.\w+\.(exec|@BYPASS@)'))	
	FPU_simd32_count	=	.temp_FPU_simd32_count - .temp_FPU_simd32_hp_count	
	FPU_simd32_hp_count	=	.temp_FPU_simd32_hp_count	
	EM_simd1_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Em\.\w+\.1\.\w+\.(exec|@BYPASS@)'))	
	EM_simd2_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Em\.\w+\.2\.\w+\.(exec|@BYPASS@)'))	
	EM_simd4_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Em\.\w+\.4\.\w+\.(exec|@BYPASS@)'))	
	.temp_EM_simd8_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Em\.\w+\.8\.\w+\.(exec|@BYPASS@)'))	
	.temp_EM_simd8_hp_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Em\.@HP@\.8\.\w+\.(exec|@BYPASS@)'))	
	EM_simd8_count	=	.temp_EM_simd8_count - .temp_EM_simd8_hp_count	
	EM_simd8_hp_count	=	.temp_EM_simd8_hp_count	
	.temp_EM_simd16_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Em\.\w+\.16\.\w+\.(exec|@BYPASS@)'))	
	.temp_EM_simd16_hp_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Em\.@HP@\.16\.\w+\.(exec|@BYPASS@)'))	
	EM_simd16_count	=	.temp_EM_simd16_count - .temp_EM_simd16_hp_count	
	EM_simd16_hp_count	=	.temp_EM_simd16_hp_count	
	.temp_EM_simd32_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Em\.\w+\.32\.\w+\.(exec|@BYPASS@)'))	
	.temp_EM_simd32_hp_count	=	D(SUM('S\d+\.SS\d+\.R\d+\.uEU_\d+\.Pipelines\.pwr_InstIssued\.CrClock\.Em\.@HP@\.32\.\w+\.(exec|@BYPASS@)'))	
	EM_simd32_count	=	.temp_EM_simd32_count - .temp_EM_simd32_hp_count	
	EM_simd32_hp_count	=	.temp_EM_simd32_hp_count	
	FPU_total_count	=	FPU_simd1_count + FPU_simd2_count + FPU_simd4_count + FPU_simd8_count + FPU_simd8_hp_count + FPU_simd16_count + FPU_simd16_hp_count + FPU_simd32_count + FPU_simd32_hp_count	
	EM_total_count	=	EM_simd1_count + EM_simd2_count + EM_simd4_count + EM_simd8_count + EM_simd8_hp_count + EM_simd16_count + EM_simd16_hp_count + EM_simd32_count + EM_simd32_hp_count	
	 @PLN@	=	(pln|lrp)	
	 @MAD@ 	=	(dp4|dph|dp3|dp2|line|mad|frc|rndu|rndd|rnde|rndz|mac|mach|lzd|sad2|sada2)	#separate out mac/sad/sada2 - diff properties
	 @MUL@	=	(mul)	
	 @ADD@	=	(add|avg|not|and|or|xor|shr|shl|cmp|cmpn|f2h|h2f|bfrev|bfe|bfi1|bfi2|fbh|fbl|cbit|addc|subb|asr)	#added ASR for media workloads
	 @MOV@	=	(mov|movi)	
	 @SEL@	=	(sel|jmpi|brd|if|brc|else|endif|case|while|break|cont|halt|call|return|fork|wait|nop)	#club sel with mov - add control flow separately
	 @TRANS@	=	(math)	#Transcendentals
	.avg_EMSrc1_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Em_ReadSrc0Tgl\.CrClock'))/numEUs)?=0	
	.avg_EMSrc2_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Em_ReadSrc1Tgl\.CrClock'))/numEUs)?=0	
	.avg_EMSrc3_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Em_ReadSrc2Tgl\.CrClock'))/numEUs)?=0	
	.avg_EMSrc4_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Em_ReadSrc1aTgl\.CrClock'))/numEUs)?=0	
	.avg_EMSrc5_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Em_ReadSrc2aTgl\.CrClock'))/numEUs)?=0	
	.avg_EMSrc6_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Em_WriteTgl\.CrClock'))/numEUs)?=0	
	.max_EM_toggle	=	MAX(.avg_EMSrc1_toggle, .avg_EMSrc2_toggle, .avg_EMSrc3_toggle, .avg_EMSrc4_toggle, .avg_EMSrc5_toggle, .avg_EMSrc6_toggle)	
	.avg_EU_idle_stall_clocks	=	(D(SUM('@ANY_EU@pwr_EuDopGatedIdleOrStalled\.CrClock')))/(numEUs)	
	.avg_EU_active_clocks	=	.CrClk - .avg_EU_idle_stall_clocks	
	EM_toggle_rate	=	(.temp_PS2_EU_EM > 0) ? (.max_EM_toggle / (32 * 4 * .temp_PS2_EU_EM * .CrClk)) : 0	#Source bus width is 32 * 4 lanes = 128 bits, use Active EU clocks for toggles
	.avg_FPUSrc1_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Fpu_ReadSrc0Tgl\.CrClock'))/numEUs)?=0	
	.avg_FPUSrc2_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Fpu_ReadSrc1Tgl\.CrClock'))/numEUs)?=0	
	.avg_FPUSrc3_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Fpu_ReadSrc2Tgl\.CrClock'))/numEUs)?=0	
	.avg_FPUSrc4_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Fpu_ReadSrc1aTgl\.CrClock'))/numEUs)?=0	
	.avg_FPUSrc5_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Fpu_ReadSrc2aTgl\.CrClock'))/numEUs)?=0	
	.avg_FPUSrc6_toggle	=	(D(SUM('@ANY_EUPIPE@pwr_Fpu_WriteTgl\.CrClock'))/numEUs)?=0	
	.max_FPU_toggle	=	MAX(.avg_FPUSrc1_toggle, .avg_FPUSrc2_toggle, .avg_FPUSrc3_toggle, .avg_FPUSrc4_toggle, .avg_FPUSrc5_toggle, .avg_FPUSrc6_toggle)	
	FPU_toggle_rate	=	(.temp_PS2_EU_FPU > 0) ? (.max_FPU_toggle / (32 * 4 * .temp_PS2_EU_FPU * .CrClk)) : 0	#Source bus width is 32 * 4 lanes = 128 bits, use Active EU clocks for toggles
	GA_toggle_rate	=	MAX(EM_toggle_rate, FPU_toggle_rate)	#Approximating GA toggle rate to the maximum of the 2 execution pipes
				
#FPU				
	PS0_EU_FPU 	=	D(SUM('@ANY_EUPIPE@pwr_FpuIdle.CrClock'))/(numEUs * .CrClk) - PS0_EU_DOP	#DOP Clock ungated
	.temp_PS2_EU_FPU	=	(( FPU_simd1_count/1) + (FPU_simd2_count/2) + ((FPU_simd4_count + FPU_simd8_count + FPU_simd16_count + FPU_simd32_count)/4) + ((FPU_simd8_hp_count + FPU_simd16_hp_count + FPU_simd32_hp_count)/8))/(numEUs * .CrClk)	#FPU Active based on SIMDness. #hp_count is temporary hack. Remove after GSIM fix
	PS1_EU_FPU	=	1 - PS0_EU_FPU - .temp_PS2_EU_FPU - PS0_EU_DOP - PS1_EU_DOP	#FPU stall - sparse scenario: (Total Clocks - FPU executed clocks - FPU Idle clocks - EU idle DOP gated - EU stalled DOP gated)
	PS2_EU_FPU	=	.temp_PS2_EU_FPU	
	FPU_mad_fp16	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.hf\.\d+\.@MAD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mul_fp16	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.hf\.\d+\.@MUL@\.exec')) / (FPU_total_count)) : 0	
	FPU_add_fp16	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.hf\.\d+\.@ADD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mov_fp16	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.hf\.\d+\.@MOV@\.exec')) / (FPU_total_count)) : 0	
	FPU_sel_fp16	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.hf\.\d+\.@SEL@\.exec')) / (FPU_total_count)) : 0	
	FPU_pln_fp32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.sf\.\d+\.@PLN@\.exec')) / (FPU_total_count)) : 0	
	FPU_mad_fp32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.sf\.\d+\.@MAD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mul_fp32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.sf\.\d+\.@MUL@\.exec')) / (FPU_total_count)) : 0	
	FPU_add_fp32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.sf\.\d+\.@ADD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mov_fp32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.sf\.\d+\.@MOV@\.exec')) / (FPU_total_count)) : 0	
	FPU_sel_fp32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.sf\.\d+\.@SEL@\.exec')) / (FPU_total_count)) : 0	
	FPU_transc_fp32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.sf\.\d+\.@TRANS@\.exec')) / (FPU_total_count)) : 0	#NA. Should be 0. No TransC on FPU
	FPU_mad_fp64	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.df\.\d+\.@MAD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mul_fp64	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.df\.\d+\.@MUL@\.exec')) / (FPU_total_count)) : 0	
	FPU_add_fp64	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.df\.\d+\.@ADD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mov_fp64	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.df\.\d+\.@MOV@\.exec')) / (FPU_total_count)) : 0	
	FPU_sel_fp64	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.df\.\d+\.@SEL@\.exec')) / (FPU_total_count)) : 0	
	FPU_mad_int16	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(w|uw)\.\d+\.@MAD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mul_int16	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(w|uw)\.\d+\.@MUL@\.exec'))/ (FPU_total_count)) : 0	
	FPU_add_int16	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(w|uw)\.\d+\.@ADD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mov_int16	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(w|uw)\.\d+\.@MOV@\.exec')) / (FPU_total_count)) : 0	
	FPU_sel_int16	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(w|uw)\.\d+\.@SEL@\.exec')) / (FPU_total_count)) : 0	
	FPU_mad_int32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(d|ud)\.\d+\.@MAD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mul_int32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(d|ud)\.\d+\.@MUL@\.exec')) / (FPU_total_count)) : 0	
	FPU_add_int32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(d|ud)\.\d+\.@ADD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mov_int32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(d|ud)\.\d+\.@MOV@\.exec')) / (FPU_total_count)) : 0	
	FPU_sel_int32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(d|ud)\.\d+\.@SEL@\.exec')) / (FPU_total_count)) : 0	
	FPU_transc_int32	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(d|ud)\.\d+\.@TRANS@\.exec')) / (FPU_total_count)) : 0	#NA. Should be 0. No TransC on FPU
	FPU_mad_int64	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(q|uq)\.\d+\.@MAD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mul_int64	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(q|uq)\.\d+\.@MUL@\.exec')) / (FPU_total_count)) : 0	
	FPU_add_int64	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(q|uq)\.\d+\.@ADD@\.exec')) / (FPU_total_count)) : 0	
	FPU_mov_int64	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(q|uq)\.\d+\.@MOV@\.exec')) / (FPU_total_count)) : 0	
	FPU_sel_int64	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.(q|uq)\.\d+\.@SEL@\.exec')) / (FPU_total_count)) : 0	
	FPU_mad_bypass	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.\w+\.\d+\.@MAD@\.@BYPASS@')) / (FPU_total_count)) : 0	
	FPU_mul_bypass	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.\w+\.\d+\.@MUL@\.@BYPASS@')) / (FPU_total_count)) : 0	
	FPU_add_bypass	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.\w+\.\d+\.@ADD@\.@BYPASS@')) / (FPU_total_count)) : 0	
	FPU_pln_bypass	=	(FPU_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Fpu\.\w+\.\d+\.@PLN@\.@BYPASS@')) / (FPU_total_count)) : 0	
#EM				
	PS0_EU_EM 	=	D(SUM('@ANY_EUPIPE@pwr_EmIdle.CrClock'))/(numEUs * .CrClk) - PS0_EU_DOP	#DOP Clock ungated
	.temp_PS2_EU_EM	=	(( EM_simd1_count/1) + (EM_simd2_count/2) + ((EM_simd4_count + EM_simd8_count + EM_simd16_count + EM_simd32_count)/4) + ((EM_simd8_hp_count + EM_simd16_hp_count + EM_simd32_hp_count)/8))/(numEUs * .CrClk)	#EM Active based on SIMDness. #hp_count is temporary hack. Remove after GSIM fix
	PS1_EU_EM	=	1 - PS0_EU_EM - .temp_PS2_EU_EM - PS0_EU_DOP - PS1_EU_DOP	#EM stall - sparse scenario: (Total Clocks - EM executed clocks - EM Idle clocks - EU idle DOP gated clocks - EU stalled DOP gated clocks)
	PS2_EU_EM	=	.temp_PS2_EU_EM	
	EM_mad_fp16	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.hf\.\d+\.@MAD@\.exec')) / (EM_total_count)) : 0	
	EM_mul_fp16	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.hf\.\d+\.@MUL@\.exec')) / (EM_total_count)) : 0	
	EM_add_fp16	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.hf\.\d+\.@ADD@\.exec')) / (EM_total_count)) : 0	
	EM_mov_fp16	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.hf\.\d+\.@MOV@\.exec')) / (EM_total_count)) : 0	
	EM_sel_fp16	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.hf\.\d+\.@SEL@\.exec')) / (EM_total_count)) : 0	
	EM_pln_fp32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.sf\.\d+\.@PLN@\.exec')) / (EM_total_count)) : 0	
	EM_mad_fp32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.sf\.\d+\.@MAD@\.exec')) / (EM_total_count)) : 0	
	EM_mul_fp32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.sf\.\d+\.@MUL@\.exec')) / (EM_total_count)) : 0	
	EM_add_fp32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.sf\.\d+\.@ADD@\.exec')) / (EM_total_count)) : 0	
	EM_mov_fp32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.sf\.\d+\.@MOV@\.exec')) / (EM_total_count)) : 0	
	EM_sel_fp32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.sf\.\d+\.@SEL@\.exec')) / (EM_total_count)) : 0	
	EM_transc_fp32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.sf\.\d+\.@TRANS@\.exec')) / (EM_total_count)) : 0	
	EM_mad_fp64	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.df\.\d+\.@MAD@\.exec')) / (EM_total_count)) : 0	
	EM_mul_fp64	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.df\.\d+\.@MUL@\.exec')) / (EM_total_count)) : 0	
	EM_add_fp64	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.df\.\d+\.@ADD@\.exec')) / (EM_total_count)) : 0	
	EM_mov_fp64	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.df\.\d+\.@MOV@\.exec')) / (EM_total_count)) : 0	
	EM_sel_fp64	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.df\.\d+\.@SEL@\.exec')) / (EM_total_count)) : 0	
	EM_mad_int16	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(w|uw)\.\d+\.@MAD@\.exec')) / (EM_total_count)) : 0	
	EM_mul_int16	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(w|uw)\.\d+\.@MUL@\.exec')) / (EM_total_count)) : 0	
	EM_add_int16	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(w|uw)\.\d+\.@ADD@\.exec')) / (EM_total_count)) : 0	
	EM_mov_int16	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(w|uw)\.\d+\.@MOV@\.exec')) / (EM_total_count)) : 0	
	EM_sel_int16	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(w|uw)\.\d+\.@SEL@\.exec')) / (EM_total_count)) : 0	
	EM_mad_int32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(d|ud)\.\d+\.@MAD@\.exec')) / (EM_total_count)) : 0	
	EM_mul_int32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(d|ud)\.\d+\.@MUL@\.exec')) / (EM_total_count)) : 0	
	EM_add_int32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(d|ud)\.\d+\.@ADD@\.exec')) / (EM_total_count)) : 0	
	EM_mov_int32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(d|ud)\.\d+\.@MOV@\.exec')) / (EM_total_count)) : 0	
	EM_sel_int32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(d|ud)\.\d+\.@SEL@\.exec')) / (EM_total_count)) : 0	
	EM_transc_int32	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(d|ud)\.\d+\.@TRANS@\.exec')) / (EM_total_count)) : 0	
	EM_mad_int64	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(q|uq)\.\d+\.@MAD@\.exec')) / (EM_total_count)) : 0	
	EM_mul_int64	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(q|uq)\.\d+\.@MUL@\.exec')) / (EM_total_count)) : 0	
	EM_add_int64	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(q|uq)\.\d+\.@ADD@\.exec')) / (EM_total_count)) : 0	
	EM_mov_int64	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(q|uq)\.\d+\.@MOV@\.exec')) / (EM_total_count)) : 0	
	EM_sel_int64	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.(q|uq)\.\d+\.@SEL@\.exec')) / (EM_total_count)) : 0	
	EM_mad_bypass	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.\w+\.\d+\.@MAD@\.@BYPASS@')) / (EM_total_count)) : 0	
	EM_mul_bypass	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.\w+\.\d+\.@MUL@\.@BYPASS@')) / (EM_total_count)) : 0	
	EM_add_bypass	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.\w+\.\d+\.@ADD@\.@BYPASS@')) / (EM_total_count)) : 0	
	EM_pln_bypass	=	(EM_total_count > 0) ? (D(SUM('@ANY_EUPIPE@pwr_InstIssued\.CrClock\.Em\.\w+\.\d+\.@PLN@\.@BYPASS@')) / (EM_total_count)) : 0	
#GA				
	PS0_GA	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_0_FPUPipe_nSrcs_0\.CrClock')) / (numEUs * .CrClk) - PS0_EU_DOP	
	PS1_GA	=	0	#GA does not have a stall
	PS2_GA_EM1Src_SinglePipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_1_FPUPipe_nSrcs_0\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_EM2Src_SinglePipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_2_FPUPipe_nSrcs_0\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_EM3Src_SinglePipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_3_FPUPipe_nSrcs_0\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_FPU1Src_SinglePipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_0_FPUPipe_nSrcs_1\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_FPU2Src_SinglePipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_0_FPUPipe_nSrcs_2\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_FPU3Src_SinglePipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_0_FPUPipe_nSrcs_3\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_EM1Src_FPU1Src_DualPipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_1_FPUPipe_nSrcs_1\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_EM1Src_FPU2Src_DualPipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_1_FPUPipe_nSrcs_2\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_EM1Src_FPU3Src_DualPipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_1_FPUPipe_nSrcs_3\.CrClock')) / (numEUs * .CrClk)	#PLN instructions take 2 clocks to complete
	PS2_GA_EM2Src_FPU1Src_DualPipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_2_FPUPipe_nSrcs_1\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_EM2Src_FPU2Src_DualPipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_2_FPUPipe_nSrcs_2\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_EM2Src_FPU3Src_DualPipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_2_FPUPipe_nSrcs_3\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_EM3Src_FPU1Src_DualPipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_3_FPUPipe_nSrcs_1\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_EM3Src_FPU2Src_DualPipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_3_FPUPipe_nSrcs_2\.CrClock')) / (numEUs * .CrClk)	
	PS2_GA_EM3Src_FPU3Src_DualPipe	=	D(SUM('@ANY_EUPIPE@pwr_IssueTo_EMPipe_nSrcs_3_FPUPipe_nSrcs_3\.CrClock')) / (numEUs * .CrClk)	
				
#TC				
	PS0_TC	=	D(SUM('@ANY_EU@pwr_ThdControllerIdle\.CrClock')) / (numEUs * .CrClk) - PS0_EU_DOP	#Subtracted EU idle DOP gated clocks
	PS1_TC	=	D(SUM('@ANY_EU@Arb\.pwr_ThdControllerDopStalled_unfiltered_count\.CrClock')) / (numEUs * .CrClk) - PS1_EU_DOP	#Updated PS1_TC based on the new GSIM stat & subtracted EU stalled DOP gated clocks based on the new definition
	PS2_TC	=	1 - PS0_TC - PS1_TC - PS0_EU_DOP - PS1_EU_DOP	
				
#GRF				
	PS0_GRF	=	0	#no PS0 for GRF
	PS2_GRF_READ	=	D(SUM('@ANY_EUPIPE@pwr_GrfReadAccesses\.CrClock')) / (numEUs * .CrClk)	#GRF reads should be at 256 bit granularity (0…4)
	PS2_GRF_WRITE	=	D(SUM('@ANY_EUPIPE@pwr_GrfWriteAccesses\.CrClock')) / (numEUs * .CrClk)	#GRF writes should be at 256 bit granularity(0…2)
				
#IPC				
	EU_Utilization	=	(PS2_EU_EM + PS2_EU_FPU) / 2	# Changed from SUM to AVG of EM/FPU active residencies
	EU_IPC	=	numEUs * EU_Utilization	
				
#DFX				
	PS0_EU_DFX	=	PS0_TC + PS1_TC	#Approximated DFX using TC residencies
	PS2_EU_DFX	=	1 - PS0_TC - PS1_TC - PS0_EU_DOP - PS1_EU_DOP	#Approximated DFX using TC residencies
				
#SMALL				
	PS0_EU_SMALL	=	PS0_TC + PS1_TC	#Approximated SMALL using TC residencies
	PS2_EU_SMALL	=	1 - PS0_TC - PS1_TC - PS0_EU_DOP - PS1_EU_DOP	#Approximated SMALL using TC residencies
				
#GLUE				
	PS0_EU_GLUE	=	PS0_TC + PS1_TC	
	PS2_EU_GLUE	=	1 - PS0_TC - PS1_TC - PS0_EU_DOP - PS1_EU_DOP	
				
#DOP				
	PS0_EU_DOP	=	(D(SUM('@ANY_EU@pwr_EuDopGatedIdle\.CrClock')))/ (numEUs * .CrClk)	#DOP Clock gated. This should be per EU to subtract from FPU/EM pipes
	PS1_EU_DOP	=	(D(SUM('@ANY_EU@pwr_EuDopGatedIdleOrStalled\.CrClock')) - D(SUM('@ANY_EU@pwr_EuDopGatedIdle\.CrClock')))/ (numEUs * .CrClk)	#DOP stall = DOP idle or stall - DOP idle
	PS2_EU_DOP	=	1 - PS0_EU_DOP - PS1_EU_DOP	
